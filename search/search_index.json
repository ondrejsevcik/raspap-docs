{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Simple AP setup & WiFi management for Debian-based devices About RaspAP lets you quickly get a WiFi access point up and running to share the connectivity of many popular Debian-based devices, including the Raspberry Pi. Our popular Quick installer creates a known-good default configuration that \"just works\" on all current Raspberry Pis with onboard wireless. Quick start Start with a clean install of the latest release of Raspberry Pi OS (32-bit) Lite . The Raspberry Pi OS desktop and 64-bit beta distros are unsupported. Update RPi OS to its latest version, including the kernel and firmware, followed by a reboot: sudo apt-get update sudo apt-get full-upgrade sudo reboot Set the WiFi country in raspi-config's Localisation Options : sudo raspi-config . Install RaspAP from your device's shell prompt: curl -sL https://install.raspap.com | bash The Quick installer will complete the steps in the manual installation for you. After the reboot at the end of the installation the wireless AP network will be configured as follows: IP address: 10.3.141.1 Username: admin Password: secret DHCP range: 10.3.141.50 to 10.3.141.255 SSID: raspi-webgui Password: ChangeMe Support us RaspAP is free software, but powered by your support. If you find RaspAP useful for your personal or commercial projects, become a sponsor and get access to exclusive features in the Insiders Edition . Compatible operating systems RaspAP was originally made for Raspbian, but now also installs on the following Debian-based distros. Distribution Release Architecture Support Raspberry Pi OS (32-bit) Lite Buster ARM Official Armbian Buster ARM Official Debian Buster ARM / x86_64 Beta Ubuntu 18.04 LTS / 19.10 ARM / x86_64 Beta Please note that \"supported\" is not a guarantee. If you are able to improve support for your preferred distro, we encourage you to actively contribute to the project. Get involved We welcome all users of RaspAP to contribute to the project. This can take the form of issue reports , discussions , or pull requests . Developers can get started by following these steps: Fork the project in your account and create a new branch: your-great-feature . Open an issue in the repository describing the feature contribution you'd like to make. Commit changes in your feature branch. Open a pull request and reference the initial issue in the pull request message. Find out more about our coding style guidelines and recommended tools .","title":"Overview"},{"location":"#overview","text":"Simple AP setup & WiFi management for Debian-based devices","title":"Overview"},{"location":"#about","text":"RaspAP lets you quickly get a WiFi access point up and running to share the connectivity of many popular Debian-based devices, including the Raspberry Pi. Our popular Quick installer creates a known-good default configuration that \"just works\" on all current Raspberry Pis with onboard wireless.","title":"About"},{"location":"#quick-start","text":"Start with a clean install of the latest release of Raspberry Pi OS (32-bit) Lite . The Raspberry Pi OS desktop and 64-bit beta distros are unsupported. Update RPi OS to its latest version, including the kernel and firmware, followed by a reboot: sudo apt-get update sudo apt-get full-upgrade sudo reboot Set the WiFi country in raspi-config's Localisation Options : sudo raspi-config . Install RaspAP from your device's shell prompt: curl -sL https://install.raspap.com | bash The Quick installer will complete the steps in the manual installation for you. After the reboot at the end of the installation the wireless AP network will be configured as follows: IP address: 10.3.141.1 Username: admin Password: secret DHCP range: 10.3.141.50 to 10.3.141.255 SSID: raspi-webgui Password: ChangeMe","title":"Quick start"},{"location":"#support-us","text":"RaspAP is free software, but powered by your support. If you find RaspAP useful for your personal or commercial projects, become a sponsor and get access to exclusive features in the Insiders Edition .","title":"Support us"},{"location":"#compatible-operating-systems","text":"RaspAP was originally made for Raspbian, but now also installs on the following Debian-based distros. Distribution Release Architecture Support Raspberry Pi OS (32-bit) Lite Buster ARM Official Armbian Buster ARM Official Debian Buster ARM / x86_64 Beta Ubuntu 18.04 LTS / 19.10 ARM / x86_64 Beta Please note that \"supported\" is not a guarantee. If you are able to improve support for your preferred distro, we encourage you to actively contribute to the project.","title":"Compatible operating systems"},{"location":"#get-involved","text":"We welcome all users of RaspAP to contribute to the project. This can take the form of issue reports , discussions , or pull requests . Developers can get started by following these steps: Fork the project in your account and create a new branch: your-great-feature . Open an issue in the repository describing the feature contribution you'd like to make. Commit changes in your feature branch. Open a pull request and reference the initial issue in the pull request message. Find out more about our coding style guidelines and recommended tools .","title":"Get involved"},{"location":"adblock/","text":"Ad blocking RaspAP is introducing a new feature to block DNS requests for ads, trackers and other undesirable hosts. In the best of times, ads are usually just annoying. When access to online services is hampered by requests for ads, the best tool in our arsenal is DNS blacklisting. RaspAP already uses dnsmasq to manage both DHCP and DNS, so implementing ad blocking was fairly straightforward. Enabling DNS blacklisting As a beta feature, we invite testing and encourage feedback from users of RaspAP. To enable ad blocking with DNS blacklists, simply respond with 'Y' or press [Enter] when prompted by the installer: Install ad blocking and enable list management? [Y/n] The installer will download the blocklists, configure RaspAP to use them and enable the Ad blocking management page. Manual installation Ad blocking may also be installed manually. Refer to the detailed installation steps . Blocklist source For the public beta release, blocklists are sourced from the notracking project on GitHub. This \"list of lists\" is gathered from multiple, actively maintained sources and automatically updated, cleaned, optimized and moderated on a daily basis. A complete list of sources is available here . Updating lists The notracking project maintains two blocklists; hostnames and domains. These are updated daily, so it's a good practice to refresh them periodically. You can do this from the Ad Blocking management page in RaspAP. Simply select the list from the dropdown and choose Update now . Note: to apply the latest blocklists, be sure to Restart Ad Blocking . Custom blocklist In addition to the notracking blocklists, you may create your own host blocklist by adding entries on the Custom blocklist tab. Define custom hosts to be blocked by entering an IPv4 or IPv6 address followed by any whitespace (spaces or tabs) and the host name. An IPv4 example would take the form 0.0.0.0 badhost.com . Choose Save settings and Restart Ad Blocking . Note: As the name suggests, this is effective at blocking individual hosts, but not entire domains (or subdomains). Enabling logging By default, DNS logging is disabled. If you'd like to see which hosts are being blocked, enable it on the DHCP Server > Logging tab by selecting the Log DNS queries toggle. Save settings and Restart Ad Blocking . The Logging tab on the Ad Blocking page will display blacklisted DNS queries with host addresses of 0.0.0.0 . A sample of blocked ad/tracker requests is below. dnsmasq[9633]: config static.ads-twitter.com is 0.0.0.0 dnsmasq[9633]: config tag.bounceexchange.com is 0.0.0.0 dnsmasq[9633]: config cdn.boomtrain.com is 0.0.0.0 dnsmasq[9633]: config securepubads.g.doubleclick.net is 0.0.0.0 dnsmasq[9633]: config c.amazon-adsystem.com is 0.0.0.0 dnsmasq[9633]: config pixel.adsafeprotected.com is 0.0.0.0 dnsmasq[9633]: config ad.doubleclick.net is 0.0.0.0 dnsmasq[9633]: config www.summerhamster.com is 0.0.0.0 dnsmasq[9633]: config c2.taboola.com is 0.0.0.0 dnsmasq[9633]: config ads.servebom.com is 0.0.0.0 dnsmasq[9633]: config s.cpx.to is 0.0.0.0 dnsmasq[9633]: config pixel.quantserve.com is 0.0.0.0 dnsmasq[9633]: config cdn.taboola.com is 0.0.0.0 dnsmasq[9633]: config sdk.iad-01.braze.com is 0.0.0.0 About blocklist policies The notracking blocklists chosen for RaspAP adhere to these policies: Should not break useful websites or apps Blocks tracking servers Blocks advertising servers Blocks analytics servers Blocks scam websites Blocks malware servers Blocks webminers Blocks phishing servers","title":"Ad blocking"},{"location":"adblock/#ad-blocking","text":"RaspAP is introducing a new feature to block DNS requests for ads, trackers and other undesirable hosts. In the best of times, ads are usually just annoying. When access to online services is hampered by requests for ads, the best tool in our arsenal is DNS blacklisting. RaspAP already uses dnsmasq to manage both DHCP and DNS, so implementing ad blocking was fairly straightforward.","title":"Ad blocking"},{"location":"adblock/#enabling-dns-blacklisting","text":"As a beta feature, we invite testing and encourage feedback from users of RaspAP. To enable ad blocking with DNS blacklists, simply respond with 'Y' or press [Enter] when prompted by the installer: Install ad blocking and enable list management? [Y/n] The installer will download the blocklists, configure RaspAP to use them and enable the Ad blocking management page.","title":"Enabling DNS blacklisting"},{"location":"adblock/#manual-installation","text":"Ad blocking may also be installed manually. Refer to the detailed installation steps .","title":"Manual installation"},{"location":"adblock/#blocklist-source","text":"For the public beta release, blocklists are sourced from the notracking project on GitHub. This \"list of lists\" is gathered from multiple, actively maintained sources and automatically updated, cleaned, optimized and moderated on a daily basis. A complete list of sources is available here .","title":"Blocklist source"},{"location":"adblock/#updating-lists","text":"The notracking project maintains two blocklists; hostnames and domains. These are updated daily, so it's a good practice to refresh them periodically. You can do this from the Ad Blocking management page in RaspAP. Simply select the list from the dropdown and choose Update now . Note: to apply the latest blocklists, be sure to Restart Ad Blocking .","title":"Updating lists"},{"location":"adblock/#custom-blocklist","text":"In addition to the notracking blocklists, you may create your own host blocklist by adding entries on the Custom blocklist tab. Define custom hosts to be blocked by entering an IPv4 or IPv6 address followed by any whitespace (spaces or tabs) and the host name. An IPv4 example would take the form 0.0.0.0 badhost.com . Choose Save settings and Restart Ad Blocking . Note: As the name suggests, this is effective at blocking individual hosts, but not entire domains (or subdomains).","title":"Custom blocklist"},{"location":"adblock/#enabling-logging","text":"By default, DNS logging is disabled. If you'd like to see which hosts are being blocked, enable it on the DHCP Server > Logging tab by selecting the Log DNS queries toggle. Save settings and Restart Ad Blocking . The Logging tab on the Ad Blocking page will display blacklisted DNS queries with host addresses of 0.0.0.0 . A sample of blocked ad/tracker requests is below. dnsmasq[9633]: config static.ads-twitter.com is 0.0.0.0 dnsmasq[9633]: config tag.bounceexchange.com is 0.0.0.0 dnsmasq[9633]: config cdn.boomtrain.com is 0.0.0.0 dnsmasq[9633]: config securepubads.g.doubleclick.net is 0.0.0.0 dnsmasq[9633]: config c.amazon-adsystem.com is 0.0.0.0 dnsmasq[9633]: config pixel.adsafeprotected.com is 0.0.0.0 dnsmasq[9633]: config ad.doubleclick.net is 0.0.0.0 dnsmasq[9633]: config www.summerhamster.com is 0.0.0.0 dnsmasq[9633]: config c2.taboola.com is 0.0.0.0 dnsmasq[9633]: config ads.servebom.com is 0.0.0.0 dnsmasq[9633]: config s.cpx.to is 0.0.0.0 dnsmasq[9633]: config pixel.quantserve.com is 0.0.0.0 dnsmasq[9633]: config cdn.taboola.com is 0.0.0.0 dnsmasq[9633]: config sdk.iad-01.braze.com is 0.0.0.0","title":"Enabling logging"},{"location":"adblock/#about-blocklist-policies","text":"The notracking blocklists chosen for RaspAP adhere to these policies: Should not break useful websites or apps Blocks tracking servers Blocks advertising servers Blocks analytics servers Blocks scam websites Blocks malware servers Blocks webminers Blocks phishing servers","title":"About blocklist policies"},{"location":"ap-sta/","text":"AP-STA mode Overview This walkthrough describes an installation of RaspAP on the Raspberry Pi Zero W . A managed mode AP, variously known as WiFi client AP mode , a micro-AP or simply AP-STA , works \"out-of-the-box\" with the Quick Installer if the steps below are followed carefully. This feature was added to RaspAP specifically to support Internet of Things (IoT) and embedded applications for the Pi Zero W, however it is equally useful for a broad range of projects. Continue reading for an explanation of AP-STA mode, or skip to the installation . What is AP-STA mode? Many wireless devices support simultaneous operation as both an access point (AP) and as a wireless client/station (STA). This is sometimes called Wi-Fi AP/STA concurrency. In this configuration, it is possible to create a software AP acting as a \"wireless repeater\" for an existing network, using a single wireless device. This capability is listed in the following section in the output of iw list : $ iw list | grep -A 4 'valid interface' valid interface combinations: * #{ managed } <= 1, #{ P2P-device } <= 1, #{ P2P-client, P2P-GO } <= 1, total <= 3, #channels <= 2 * #{ managed } <= 1, #{ AP } <= 1, #{ P2P-client } <= 1, #{ P2P-device } <= 1, total <= 4, #channels <= 1 The second valid interface combination indicates that both a managed and AP configuration is possible. The constraint #channels <= 1 means that your software AP must operate on the same channel as your Wi-Fi client connection. Note: if you have a second wireless adapter bound to wlan1 on a Pi Zero W (or other device), refer to this FAQ . Use cases There are many scenarios in which AP-STA mode might be useful. These are some of the more popular ones: A device that connects to a wireless AP but needs an admin interface to configure the network and/or other services. A hub for Internet of Things devices, while also creating a bridge between them and the internet. A guest interface to your home wireless network. Security is an important consideration with IoT and it can be beneficial to keep your devices on a separate network, for safety\u2019s sake. No one wants a random internet user turning your lights on and off. How does AP-STA work? In this configuration, we create a virtual network interface (here uap0 ) and add it as the AP to the physical wlan0 device. This virtual interface is used by several of the services needed to operate a software access point. RaspAP manages these configurations in the background for you. Relevant sections are displayed below as examples. dhcpcd.conf : # RaspAP uap0 configuration interface uap0 static ip_address=192.168.50.1/24 nohook wpa_supplicant hostapd.conf : # RaspAP wireless client AP mode interface=uap0 dnsmasq.conf : # RaspAP uap0 configuration interface=lo,uap0 # Use interfaces lo and uap0 bind-interfaces # Bind to the interfaces domain-needed # Don't forward short names bogus-priv # Never forward addresses in the non-routed address spaces On AP-STA startup and system reboots, RaspAP's service control script adds the virtual uap0 interface and brings it up, like so: iw dev wlan0 interface add uap0 type __ap ifconfig uap0 up After the virtual uap0 interface is added to the wlan0 physical device, we can then start up hostapd . It is important that the virtual interface is brought up first, otherwise it will fail with the message \"could not configure driver mode\". We also need to be sure that the interface is not managed by systemd-networkd , so this service should be disabled. These steps are handled by the RaspAP daemon . With a basic understanding of AP-STA mode, we can proceed with the installation. Installation Begin by flashing an SD card with the latest release of Raspberry Pi OS (32-bit) Lite . Prepare the SD card to connect to your WiFi network in headless mode according to this FAQ . Enable ssh access by creating an empty file called \"ssh\" (no extension) in the SD card's root. Insert the SD card into the Pi Zero W and connect it to power. Note: the standard power supply for the Raspberry Pi is 5.1V @ 2.5A. Other power sources may result in undervoltage or other issues. Do not use the micro USB connection. Connect to your Pi via ssh. ssh pi@raspberrypi.local is typical. Follow the project prerequisites exactly. Do not skip any of these steps. Invoke the Quick Installer as normal: curl -sL https://install.raspap.com | bash . The installer automatically detects a Pi (or other device) without an active eth0 interface. In this case, you will not be prompted to reboot your Pi. Open the RaspAP admin interface in your browser, usually http://raspberrypi.local. The status widget should indicate that hostapd is inactive. This is expected. Confirm that the Wireless Client dashboard widget displays an active connection. Choose Hotspot > Advanced and enable the WiFi client AP mode option. Optionally, enable Logfile output as this is often helpful for troubleshooting. Choose Save settings and Start hotspot . Wait a few moments and confirm that your AP has started. Note: The WiFi client AP mode option will be disabled, or \"greyed out\", until a wireless client is configured. When to reboot? Rebooting before configuring AP-STA mode is likely the main cause of problems for users with the Pi Zero W. The reason is the default configuration is designed for a wired (ethernet) AP. Once the Pi Zero W is configured in AP-STA mode, RaspAP will store several values in /etc/raspap/hostapd.ini : LogEnable = 1 WifiAPEnable = 1 BridgedEnable = 0 WifiManaged = wlan0 These are used by RaspAP's systemd control service raspapd to determine that a managed mode AP is enabled for the Pi and restore the connection after subsequent reboots. Changing hostapd settings Changes to the hotspot configuration should be applied to the wlan0 physical device, not uap0 (a virtual interface). In other words, configure hostapd before enabling AP-STA mode.","title":"AP-STA mode"},{"location":"ap-sta/#ap-sta-mode","text":"","title":"AP-STA mode"},{"location":"ap-sta/#overview","text":"This walkthrough describes an installation of RaspAP on the Raspberry Pi Zero W . A managed mode AP, variously known as WiFi client AP mode , a micro-AP or simply AP-STA , works \"out-of-the-box\" with the Quick Installer if the steps below are followed carefully. This feature was added to RaspAP specifically to support Internet of Things (IoT) and embedded applications for the Pi Zero W, however it is equally useful for a broad range of projects. Continue reading for an explanation of AP-STA mode, or skip to the installation .","title":"Overview"},{"location":"ap-sta/#what-is-ap-sta-mode","text":"Many wireless devices support simultaneous operation as both an access point (AP) and as a wireless client/station (STA). This is sometimes called Wi-Fi AP/STA concurrency. In this configuration, it is possible to create a software AP acting as a \"wireless repeater\" for an existing network, using a single wireless device. This capability is listed in the following section in the output of iw list : $ iw list | grep -A 4 'valid interface' valid interface combinations: * #{ managed } <= 1, #{ P2P-device } <= 1, #{ P2P-client, P2P-GO } <= 1, total <= 3, #channels <= 2 * #{ managed } <= 1, #{ AP } <= 1, #{ P2P-client } <= 1, #{ P2P-device } <= 1, total <= 4, #channels <= 1 The second valid interface combination indicates that both a managed and AP configuration is possible. The constraint #channels <= 1 means that your software AP must operate on the same channel as your Wi-Fi client connection. Note: if you have a second wireless adapter bound to wlan1 on a Pi Zero W (or other device), refer to this FAQ .","title":"What is AP-STA mode?"},{"location":"ap-sta/#use-cases","text":"There are many scenarios in which AP-STA mode might be useful. These are some of the more popular ones: A device that connects to a wireless AP but needs an admin interface to configure the network and/or other services. A hub for Internet of Things devices, while also creating a bridge between them and the internet. A guest interface to your home wireless network. Security is an important consideration with IoT and it can be beneficial to keep your devices on a separate network, for safety\u2019s sake. No one wants a random internet user turning your lights on and off.","title":"Use cases"},{"location":"ap-sta/#how-does-ap-sta-work","text":"In this configuration, we create a virtual network interface (here uap0 ) and add it as the AP to the physical wlan0 device. This virtual interface is used by several of the services needed to operate a software access point. RaspAP manages these configurations in the background for you. Relevant sections are displayed below as examples. dhcpcd.conf : # RaspAP uap0 configuration interface uap0 static ip_address=192.168.50.1/24 nohook wpa_supplicant hostapd.conf : # RaspAP wireless client AP mode interface=uap0 dnsmasq.conf : # RaspAP uap0 configuration interface=lo,uap0 # Use interfaces lo and uap0 bind-interfaces # Bind to the interfaces domain-needed # Don't forward short names bogus-priv # Never forward addresses in the non-routed address spaces On AP-STA startup and system reboots, RaspAP's service control script adds the virtual uap0 interface and brings it up, like so: iw dev wlan0 interface add uap0 type __ap ifconfig uap0 up After the virtual uap0 interface is added to the wlan0 physical device, we can then start up hostapd . It is important that the virtual interface is brought up first, otherwise it will fail with the message \"could not configure driver mode\". We also need to be sure that the interface is not managed by systemd-networkd , so this service should be disabled. These steps are handled by the RaspAP daemon . With a basic understanding of AP-STA mode, we can proceed with the installation.","title":"How does AP-STA work?"},{"location":"ap-sta/#installation","text":"Begin by flashing an SD card with the latest release of Raspberry Pi OS (32-bit) Lite . Prepare the SD card to connect to your WiFi network in headless mode according to this FAQ . Enable ssh access by creating an empty file called \"ssh\" (no extension) in the SD card's root. Insert the SD card into the Pi Zero W and connect it to power. Note: the standard power supply for the Raspberry Pi is 5.1V @ 2.5A. Other power sources may result in undervoltage or other issues. Do not use the micro USB connection. Connect to your Pi via ssh. ssh pi@raspberrypi.local is typical. Follow the project prerequisites exactly. Do not skip any of these steps. Invoke the Quick Installer as normal: curl -sL https://install.raspap.com | bash . The installer automatically detects a Pi (or other device) without an active eth0 interface. In this case, you will not be prompted to reboot your Pi. Open the RaspAP admin interface in your browser, usually http://raspberrypi.local. The status widget should indicate that hostapd is inactive. This is expected. Confirm that the Wireless Client dashboard widget displays an active connection. Choose Hotspot > Advanced and enable the WiFi client AP mode option. Optionally, enable Logfile output as this is often helpful for troubleshooting. Choose Save settings and Start hotspot . Wait a few moments and confirm that your AP has started. Note: The WiFi client AP mode option will be disabled, or \"greyed out\", until a wireless client is configured.","title":"Installation"},{"location":"ap-sta/#when-to-reboot","text":"Rebooting before configuring AP-STA mode is likely the main cause of problems for users with the Pi Zero W. The reason is the default configuration is designed for a wired (ethernet) AP. Once the Pi Zero W is configured in AP-STA mode, RaspAP will store several values in /etc/raspap/hostapd.ini : LogEnable = 1 WifiAPEnable = 1 BridgedEnable = 0 WifiManaged = wlan0 These are used by RaspAP's systemd control service raspapd to determine that a managed mode AP is enabled for the Pi and restore the connection after subsequent reboots.","title":"When to reboot?"},{"location":"ap-sta/#changing-hostapd-settings","text":"Changes to the hotspot configuration should be applied to the wlan0 physical device, not uap0 (a virtual interface). In other words, configure hostapd before enabling AP-STA mode.","title":"Changing hostapd settings"},{"location":"bridged/","text":"Bridged AP mode Overview By default RaspAP configures a routed AP as its hotspot, where your RPi creates a subnet and assigns IP addresses to its hotspot clients. If you would rather have your upstream router assign IP addresses, RaspAP lets you change the hotspot configuration to an alternative bridged AP. This is also useful if you want your RPi and its hotspot clients to be visible to other devices in your router's network. Toggling bridged AP mode In the RaspAP web interface, go to Hotspot > Advanced tab, then slide the Bridged AP mode toggle. Save settings then Restart hotspot . Limitations Bridged AP mode has some limitations compared to RaspAP's default routed AP. On the Hotspot > Advanced tab the Wifi Client AP mode option is disabled. Your RPi cannot connect as a client to another Wifi network while simultaneously hosting its own bridged AP (hotspot). The DHCP Server page is disabled. The reason for this is in bridged AP mode, your upstream router is the DHCP server. Use your router's web interface to configure DHCP settings. Clients connected to a bridged AP with OpenVPN enabled will not have their traffic routed through the VPN server. Your RPi itself will still have its own traffic routed through the VPN server. Accessing the web interface In bridged AP mode, you will no longer be able to access RaspAP's web interface using the default 10.3.141.1 address. This is because your RPi no longer creates its own 10.3.141.0/24 subnet for its hotspot. Instead, access RaspAP's web interface by entering your RPi's hostname followed by .local . By default this will look like raspberrypi.local . Some browsers have trouble resolving .local addresses. You might have to modify the address depending on your browser: http://raspberrypi.local or raspberrypi.local/ . If the above methods don't work, the nmap command (Network Mapper) can be used to scan your subnet for devices connected to your network. For example, invoke namp with the -sn flag (ping scan) on your subnet range: nmap -sn 192.168.1.0/24 This scan pings all the IP addresses in a subnet to see if they respond. For each device that responds to the ping, the output will show the hostname and IP address like so: Starting Nmap 7.80 ( https://nmap.org ) at 2021-01-23 10:04 CET Nmap scan report for iPhone 192.168.1.31 Host is up (0.037s latency). Nmap scan report for raspberrypi 192.168.1.8 Host is up (0.031s latency). Nmap scan report for Chromecast 192.168.1.45 Host is up (0.0015s latency). Nmap scan report for mbp15 192.168.1.48 Host is up (0.074s latency). Nmap done: 256 IP addresses (4 hosts up) scanned in 6.08 seconds More information on finding your RPi's IP address can be found here . Contributed by @Taikuh","title":"Bridged AP mode"},{"location":"bridged/#bridged-ap-mode","text":"","title":"Bridged AP mode"},{"location":"bridged/#overview","text":"By default RaspAP configures a routed AP as its hotspot, where your RPi creates a subnet and assigns IP addresses to its hotspot clients. If you would rather have your upstream router assign IP addresses, RaspAP lets you change the hotspot configuration to an alternative bridged AP. This is also useful if you want your RPi and its hotspot clients to be visible to other devices in your router's network.","title":"Overview"},{"location":"bridged/#toggling-bridged-ap-mode","text":"In the RaspAP web interface, go to Hotspot > Advanced tab, then slide the Bridged AP mode toggle. Save settings then Restart hotspot .","title":"Toggling bridged AP mode"},{"location":"bridged/#limitations","text":"Bridged AP mode has some limitations compared to RaspAP's default routed AP. On the Hotspot > Advanced tab the Wifi Client AP mode option is disabled. Your RPi cannot connect as a client to another Wifi network while simultaneously hosting its own bridged AP (hotspot). The DHCP Server page is disabled. The reason for this is in bridged AP mode, your upstream router is the DHCP server. Use your router's web interface to configure DHCP settings. Clients connected to a bridged AP with OpenVPN enabled will not have their traffic routed through the VPN server. Your RPi itself will still have its own traffic routed through the VPN server.","title":"Limitations"},{"location":"bridged/#accessing-the-web-interface","text":"In bridged AP mode, you will no longer be able to access RaspAP's web interface using the default 10.3.141.1 address. This is because your RPi no longer creates its own 10.3.141.0/24 subnet for its hotspot. Instead, access RaspAP's web interface by entering your RPi's hostname followed by .local . By default this will look like raspberrypi.local . Some browsers have trouble resolving .local addresses. You might have to modify the address depending on your browser: http://raspberrypi.local or raspberrypi.local/ . If the above methods don't work, the nmap command (Network Mapper) can be used to scan your subnet for devices connected to your network. For example, invoke namp with the -sn flag (ping scan) on your subnet range: nmap -sn 192.168.1.0/24 This scan pings all the IP addresses in a subnet to see if they respond. For each device that responds to the ping, the output will show the hostname and IP address like so: Starting Nmap 7.80 ( https://nmap.org ) at 2021-01-23 10:04 CET Nmap scan report for iPhone 192.168.1.31 Host is up (0.037s latency). Nmap scan report for raspberrypi 192.168.1.8 Host is up (0.031s latency). Nmap scan report for Chromecast 192.168.1.45 Host is up (0.0015s latency). Nmap scan report for mbp15 192.168.1.48 Host is up (0.074s latency). Nmap done: 256 IP addresses (4 hosts up) scanned in 6.08 seconds More information on finding your RPi's IP address can be found here . Contributed by @Taikuh","title":"Accessing the web interface"},{"location":"captive/","text":"Captive portal setup Overview The nodogsplash project is a lightweight, highly configurable captive portal solution. It integrates nicely with RaspAP and is recommended over other methods. No configuration changes are needed with RaspAP, however you will need to modify some default settings in the nodogsplash config. This step-by-step guide assumes you have already installed RaspAP, either with the Quick Installer or manual setup instructions . Note: This walkthrough is provided as a courtesy only; there is no support for NDS or any integration with this project. Installing the software Begin by updating your RPi with the latest package information: sudo apt-get update With our package manager up to date, install a dependency required by nodogsplash: sudo apt-get install libmicrohttpd-dev Next, clone the nodogsplash GitHub repository to your home directory: cd ~/ git clone https://github.com/nodogsplash/nodogsplash.git We can now compile nodogsplash from the source: cd nodogsplash make sudo make install Configuration changes With nodogsplash installed in the Pi's system, we will make two small changes to its configuration. The nodogsplash GatewayInterface should be set to the interface RaspAP runs on ( wlan0 is the default). You will also need to change the GateWayAddress to 10.3.141.1 . Note: if you have modified RaspAP's default config, be sure this setting reflects your changes. sudo nano /etc/nodogsplash/nodogsplash.conf # GatewayInterface is not autodetected, has no default, and must be set here. # Set GatewayInterface to the interface on your router # that is to be managed by Nodogsplash. # Typically br-lan for the wired and wireless lan. # GatewayInterface wlan0 # # Parameter: GatewayAddress # Default: Discovered from GatewayInterface # # This should be autodetected on an OpenWRT system, but if not: # Set GatewayAddress to the IP address of the router on # the GatewayInterface. This is the address that the Nodogsplash # server listens on. GatewayAddress 10.3.141.1 Save and quit out of the editor by pressing Ctrl+X and then pressing Y and finally Enter . Starting the captive portal We are now ready to start up the software. This can be done by simply executing the binary with sudo nodogsplash . However, we'll make things a bit easier by adding a systemd service provided by the project. Copy the service control file and enable it: sudo cp ~/nodogsplash/debian/nodogsplash.service /lib/systemd/system/ sudo systemctl enable nodogsplash.service Next, start the service and check its status: sudo systemctl start nodogsplash.service sudo systemctl status nodogsplash.service You should see output similar to the following: \u25cf nodogsplash.service - NoDogSplash Captive Portal Loaded: loaded (/lib/systemd/system/nodogsplash.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2020-02-11 09:19:44 GMT; 34min ago Main PID: 10539 (nodogsplash) Tasks: 4 (limit: 1599) Memory: 1.7M CGroup: /system.slice/nodogsplash.service \u2514\u250010539 /usr/bin/nodogsplash Feb 11 09:19:44 raspberrypi systemd[1]: Starting NoDogSplash Captive Portal... Feb 11 09:19:44 raspberrypi nodogsplash[10538]: [5][Tue Feb 11 09:19:44 2020][10538](src/main.c:496) Starting as daemon, forking to background Feb 11 09:19:44 raspberrypi nodogsplash[10538]: [5][Tue Feb 11 09:19:44 2020][10539](src/main.c:271) Detected gateway wlan0 at 10.3.141.1 (dc:a6:32:3d:ff:9d) Feb 11 09:19:44 raspberrypi nodogsplash[10538]: [5][Tue Feb 11 09:19:44 2020][10539](src/main.c:275) MHD Unescape Callback is Disabled Feb 11 09:19:44 raspberrypi nodogsplash[10538]: [5][Tue Feb 11 09:19:44 2020][10539](src/main.c:305) Created web server on 10.3.141.1:2050 Feb 11 09:19:44 raspberrypi nodogsplash[10538]: [5][Tue Feb 11 09:19:44 2020][10539](src/main.c:319) Using config options for FAS or Templated Splash. Feb 11 09:19:44 raspberrypi systemd[1]: Started NoDogSplash Captive Portal. Feb 11 09:19:46 raspberrypi nodogsplash[10538]: [5][Tue Feb 11 09:19:46 2020][10539](src/fw_iptables.c:382) Initializing firewall rules Note: The captive portal may be stopped with sudo systemctl stop nodogsplash.service or disabled completely with sudo systemctl disable nodogsplash.service . Connecting clients Connect a client to RaspAP's hotspot. You should now see nodogsplash's captive portal screen: Optional: you can customize the captive portal screen by modifying the files located in /etc/nodogsplash/htdocs/ .","title":"Captive portal setup"},{"location":"captive/#captive-portal-setup","text":"","title":"Captive portal setup"},{"location":"captive/#overview","text":"The nodogsplash project is a lightweight, highly configurable captive portal solution. It integrates nicely with RaspAP and is recommended over other methods. No configuration changes are needed with RaspAP, however you will need to modify some default settings in the nodogsplash config. This step-by-step guide assumes you have already installed RaspAP, either with the Quick Installer or manual setup instructions . Note: This walkthrough is provided as a courtesy only; there is no support for NDS or any integration with this project.","title":"Overview"},{"location":"captive/#installing-the-software","text":"Begin by updating your RPi with the latest package information: sudo apt-get update With our package manager up to date, install a dependency required by nodogsplash: sudo apt-get install libmicrohttpd-dev Next, clone the nodogsplash GitHub repository to your home directory: cd ~/ git clone https://github.com/nodogsplash/nodogsplash.git We can now compile nodogsplash from the source: cd nodogsplash make sudo make install","title":"Installing the software"},{"location":"captive/#configuration-changes","text":"With nodogsplash installed in the Pi's system, we will make two small changes to its configuration. The nodogsplash GatewayInterface should be set to the interface RaspAP runs on ( wlan0 is the default). You will also need to change the GateWayAddress to 10.3.141.1 . Note: if you have modified RaspAP's default config, be sure this setting reflects your changes. sudo nano /etc/nodogsplash/nodogsplash.conf # GatewayInterface is not autodetected, has no default, and must be set here. # Set GatewayInterface to the interface on your router # that is to be managed by Nodogsplash. # Typically br-lan for the wired and wireless lan. # GatewayInterface wlan0 # # Parameter: GatewayAddress # Default: Discovered from GatewayInterface # # This should be autodetected on an OpenWRT system, but if not: # Set GatewayAddress to the IP address of the router on # the GatewayInterface. This is the address that the Nodogsplash # server listens on. GatewayAddress 10.3.141.1 Save and quit out of the editor by pressing Ctrl+X and then pressing Y and finally Enter .","title":"Configuration changes"},{"location":"captive/#starting-the-captive-portal","text":"We are now ready to start up the software. This can be done by simply executing the binary with sudo nodogsplash . However, we'll make things a bit easier by adding a systemd service provided by the project. Copy the service control file and enable it: sudo cp ~/nodogsplash/debian/nodogsplash.service /lib/systemd/system/ sudo systemctl enable nodogsplash.service Next, start the service and check its status: sudo systemctl start nodogsplash.service sudo systemctl status nodogsplash.service You should see output similar to the following: \u25cf nodogsplash.service - NoDogSplash Captive Portal Loaded: loaded (/lib/systemd/system/nodogsplash.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2020-02-11 09:19:44 GMT; 34min ago Main PID: 10539 (nodogsplash) Tasks: 4 (limit: 1599) Memory: 1.7M CGroup: /system.slice/nodogsplash.service \u2514\u250010539 /usr/bin/nodogsplash Feb 11 09:19:44 raspberrypi systemd[1]: Starting NoDogSplash Captive Portal... Feb 11 09:19:44 raspberrypi nodogsplash[10538]: [5][Tue Feb 11 09:19:44 2020][10538](src/main.c:496) Starting as daemon, forking to background Feb 11 09:19:44 raspberrypi nodogsplash[10538]: [5][Tue Feb 11 09:19:44 2020][10539](src/main.c:271) Detected gateway wlan0 at 10.3.141.1 (dc:a6:32:3d:ff:9d) Feb 11 09:19:44 raspberrypi nodogsplash[10538]: [5][Tue Feb 11 09:19:44 2020][10539](src/main.c:275) MHD Unescape Callback is Disabled Feb 11 09:19:44 raspberrypi nodogsplash[10538]: [5][Tue Feb 11 09:19:44 2020][10539](src/main.c:305) Created web server on 10.3.141.1:2050 Feb 11 09:19:44 raspberrypi nodogsplash[10538]: [5][Tue Feb 11 09:19:44 2020][10539](src/main.c:319) Using config options for FAS or Templated Splash. Feb 11 09:19:44 raspberrypi systemd[1]: Started NoDogSplash Captive Portal. Feb 11 09:19:46 raspberrypi nodogsplash[10538]: [5][Tue Feb 11 09:19:46 2020][10539](src/fw_iptables.c:382) Initializing firewall rules Note: The captive portal may be stopped with sudo systemctl stop nodogsplash.service or disabled completely with sudo systemctl disable nodogsplash.service .","title":"Starting the captive portal"},{"location":"captive/#connecting-clients","text":"Connect a client to RaspAP's hotspot. You should now see nodogsplash's captive portal screen: Optional: you can customize the captive portal screen by modifying the files located in /etc/nodogsplash/htdocs/ .","title":"Connecting clients"},{"location":"defaults/","text":"Default settings Overview Creating a software routed access point (AP) requires the installation and setup of several related Linux services. RaspAP uses a known-good default configuration as a starting point. This facilitates a faster setup by not prompting the user for various network settings during the installation. More importantly, it eliminates guesswork that can lead to conflicts down the road. When the manual or quick installation is completed, you will have a functional AP that you may then administer with RaspAP's web interface. While this project handles every facet of this process for you, it's still recommended that users familiarize themselves with the steps involved in building a software AP from start to finish. Configuration directory To every extent possible, RaspAP's default settings are contained within the project's /config folder. The networking defaults, DNS servers, wireless regulatory data and so on are found here. In this way, the user may modify RaspAP's baseline application settings without touching code. The exception to this is hostapd.conf which is managed by includes/hostapd.php and effectively rewritten depending on user input. This is due to the complexity of this configuration relative to other services managed by the project. For this reason, manual edits to this file will not be preserved. Baseline configurations for dhcpcd , dnsmasq (described below) and bridged AP configurations are contained here. Managing config values The interface itself, default Linux file paths and so on may be changed by modifying the project's configuration file config.php . Note: The file config/config.php is copied during the installation to includes/config.php and ignored by Git. This way, users can modify includes/config.php without git pull or upgrades complaining about local changes. The file includes/defaults.php loads corresponding default values if they are not set. For example, you can change the brand text that appears in the interface header simply by modifying the value of this constant: define('RASPI_BRAND_TEXT', 'RaspAP'); RaspAP's interface may be further customized by changing the following values: // Optional services, set to true to enable. define('RASPI_WIFICLIENT_ENABLED', true); define('RASPI_HOTSPOT_ENABLED', true); define('RASPI_NETWORK_ENABLED', true); define('RASPI_DHCP_ENABLED', true); define('RASPI_ADBLOCK_ENABLED', false); define('RASPI_OPENVPN_ENABLED', false); define('RASPI_WIREGUARD_ENABLED', false); define('RASPI_TORPROXY_ENABLED', false); define('RASPI_CONFAUTH_ENABLED', true); define('RASPI_CHANGETHEME_ENABLED', true); define('RASPI_VNSTAT_ENABLED', true); define('RASPI_SYSTEM_ENABLED', true); define('RASPI_MONITOR_ENABLED', false); The constants defined for Linux configuration file paths are typical and needn't be changed, in most cases. However, you could easily do so simply by modifying this file. Networking defaults The default AP interface used by RaspAP is wlan0 . This is a typical setting if you are using the RPi's onboard wireless adapter. You can change this to a different interface by modifying the following value in config.php : define('RASPI_WIFI_AP_INTERFACE', 'wlan0'); Note: If a second wireless adapter is configured for your device, for example bound to the wlan1 interface, RaspAP will automatically detect it and assign it as the default wireless client interface. You may change this setting simply by selecting wlan1 as the AP interface in the Hotspot > Basic panel. After restarting the hotspot, RaspAP will use wlan0 as the client interface. Default values for the dnsmasq and dhcpcd services can be modified as well. The file config/defaults.json was introduced with the version 2.6 release . This file is copied during the installation to /etc/raspap/networking/ , so any changes to it must be made here. The defaults.json file uses the standard JSON data-interchange format. For example, the default dhcp settings for wlan0 are displayed below: \"dhcp\": { \"wlan0\": { \"static ip_address\": [ \"10.3.141.1/24\" ], \"static routers\": [ \"10.3.141.1\" ], \"static domain_name_server\": [ \"1.1.1.1 8.8.8.8\" ], \"subnetmask\": [ \"255.255.255.0\" ] } Likewise, the DHCP ranges for both wlan0 and the virtual uap0 interface are shown below: \"dnsmasq\": { \"wlan0\": { \"dhcp-range\": [ \"10.3.141.50,10.3.141.255,255.255.255.0,12h\" ] }, \"uap0\": { \"dhcp-range\": [ \"192.168.50.50,192.168.50.150,12h\" ] } These default settings are defined as fallback values. That is, if a user-defined value is undefined these will be used in their place. DNS servers The list of hosted DNS servers available in the Upstream DNS servers panel in DHCP > Advanced may be modified to suit your needs. The file config/dns-servers.json contains a JSON formatted collection of hostnames and IPv4 addresses, like so: \"Google\": [ \"8.8.4.4\", \"8.8.8.8\" ], \"OpenDNS\": [ \"208.67.220.220\", \"208.67.222.222\" ], \"Quad9\": [ \"9.9.9.9\" ], Edits to this file in place will immediately be reflected in the user interface. Wireless regulatory data 802.11 wireless AC support is not simply a function of your device's hardware capabilities. It must also take into account regulatory restrictions of the wireless spectrum. The regulatory info for brcmfmac , the kernel driver that supports the Broadcom wireless chipset, is embedded in the firmware of RPi models 3B+ and 4. There are lots of international issues with Wi-Fi that restrict channel use, transmission power, etc. on a regional and per-country basis. As a result, only combinations of certain frequencies (channels) and countries are capable of hosting an AC access point with the RPi's wireless adapter. Based on rigorous testing of RaspAP's AC wireless mode with supported RPi hardware, the file config/wireless.json was developed to capture regulatory data as it applies here. For example, the countries that permit 5 GHz low-power AC channels (according to brcmfmac ) are defined below: \"5Ghz_max48ch\": { \"countries\": [ \"NL\",\"US\" ], \"channels\": [ 36, 40, 44, 48 ] } If you think your country might support AC wireless, this file may be modified in place and the options reflected in the Hotspot > Basic panel. See this FAQ for more information. Restoring settings If you've modified RaspAP's default configuration and the AP no longer works as expected, the defaults may be restored simply by running the Quick installer again or by following the steps described in the manual installation .","title":"Default settings"},{"location":"defaults/#default-settings","text":"","title":"Default settings"},{"location":"defaults/#overview","text":"Creating a software routed access point (AP) requires the installation and setup of several related Linux services. RaspAP uses a known-good default configuration as a starting point. This facilitates a faster setup by not prompting the user for various network settings during the installation. More importantly, it eliminates guesswork that can lead to conflicts down the road. When the manual or quick installation is completed, you will have a functional AP that you may then administer with RaspAP's web interface. While this project handles every facet of this process for you, it's still recommended that users familiarize themselves with the steps involved in building a software AP from start to finish.","title":"Overview"},{"location":"defaults/#configuration-directory","text":"To every extent possible, RaspAP's default settings are contained within the project's /config folder. The networking defaults, DNS servers, wireless regulatory data and so on are found here. In this way, the user may modify RaspAP's baseline application settings without touching code. The exception to this is hostapd.conf which is managed by includes/hostapd.php and effectively rewritten depending on user input. This is due to the complexity of this configuration relative to other services managed by the project. For this reason, manual edits to this file will not be preserved. Baseline configurations for dhcpcd , dnsmasq (described below) and bridged AP configurations are contained here.","title":"Configuration directory"},{"location":"defaults/#managing-config-values","text":"The interface itself, default Linux file paths and so on may be changed by modifying the project's configuration file config.php . Note: The file config/config.php is copied during the installation to includes/config.php and ignored by Git. This way, users can modify includes/config.php without git pull or upgrades complaining about local changes. The file includes/defaults.php loads corresponding default values if they are not set. For example, you can change the brand text that appears in the interface header simply by modifying the value of this constant: define('RASPI_BRAND_TEXT', 'RaspAP'); RaspAP's interface may be further customized by changing the following values: // Optional services, set to true to enable. define('RASPI_WIFICLIENT_ENABLED', true); define('RASPI_HOTSPOT_ENABLED', true); define('RASPI_NETWORK_ENABLED', true); define('RASPI_DHCP_ENABLED', true); define('RASPI_ADBLOCK_ENABLED', false); define('RASPI_OPENVPN_ENABLED', false); define('RASPI_WIREGUARD_ENABLED', false); define('RASPI_TORPROXY_ENABLED', false); define('RASPI_CONFAUTH_ENABLED', true); define('RASPI_CHANGETHEME_ENABLED', true); define('RASPI_VNSTAT_ENABLED', true); define('RASPI_SYSTEM_ENABLED', true); define('RASPI_MONITOR_ENABLED', false); The constants defined for Linux configuration file paths are typical and needn't be changed, in most cases. However, you could easily do so simply by modifying this file.","title":"Managing config values"},{"location":"defaults/#networking-defaults","text":"The default AP interface used by RaspAP is wlan0 . This is a typical setting if you are using the RPi's onboard wireless adapter. You can change this to a different interface by modifying the following value in config.php : define('RASPI_WIFI_AP_INTERFACE', 'wlan0'); Note: If a second wireless adapter is configured for your device, for example bound to the wlan1 interface, RaspAP will automatically detect it and assign it as the default wireless client interface. You may change this setting simply by selecting wlan1 as the AP interface in the Hotspot > Basic panel. After restarting the hotspot, RaspAP will use wlan0 as the client interface. Default values for the dnsmasq and dhcpcd services can be modified as well. The file config/defaults.json was introduced with the version 2.6 release . This file is copied during the installation to /etc/raspap/networking/ , so any changes to it must be made here. The defaults.json file uses the standard JSON data-interchange format. For example, the default dhcp settings for wlan0 are displayed below: \"dhcp\": { \"wlan0\": { \"static ip_address\": [ \"10.3.141.1/24\" ], \"static routers\": [ \"10.3.141.1\" ], \"static domain_name_server\": [ \"1.1.1.1 8.8.8.8\" ], \"subnetmask\": [ \"255.255.255.0\" ] } Likewise, the DHCP ranges for both wlan0 and the virtual uap0 interface are shown below: \"dnsmasq\": { \"wlan0\": { \"dhcp-range\": [ \"10.3.141.50,10.3.141.255,255.255.255.0,12h\" ] }, \"uap0\": { \"dhcp-range\": [ \"192.168.50.50,192.168.50.150,12h\" ] } These default settings are defined as fallback values. That is, if a user-defined value is undefined these will be used in their place.","title":"Networking defaults"},{"location":"defaults/#dns-servers","text":"The list of hosted DNS servers available in the Upstream DNS servers panel in DHCP > Advanced may be modified to suit your needs. The file config/dns-servers.json contains a JSON formatted collection of hostnames and IPv4 addresses, like so: \"Google\": [ \"8.8.4.4\", \"8.8.8.8\" ], \"OpenDNS\": [ \"208.67.220.220\", \"208.67.222.222\" ], \"Quad9\": [ \"9.9.9.9\" ], Edits to this file in place will immediately be reflected in the user interface.","title":"DNS servers"},{"location":"defaults/#wireless-regulatory-data","text":"802.11 wireless AC support is not simply a function of your device's hardware capabilities. It must also take into account regulatory restrictions of the wireless spectrum. The regulatory info for brcmfmac , the kernel driver that supports the Broadcom wireless chipset, is embedded in the firmware of RPi models 3B+ and 4. There are lots of international issues with Wi-Fi that restrict channel use, transmission power, etc. on a regional and per-country basis. As a result, only combinations of certain frequencies (channels) and countries are capable of hosting an AC access point with the RPi's wireless adapter. Based on rigorous testing of RaspAP's AC wireless mode with supported RPi hardware, the file config/wireless.json was developed to capture regulatory data as it applies here. For example, the countries that permit 5 GHz low-power AC channels (according to brcmfmac ) are defined below: \"5Ghz_max48ch\": { \"countries\": [ \"NL\",\"US\" ], \"channels\": [ 36, 40, 44, 48 ] } If you think your country might support AC wireless, this file may be modified in place and the options reflected in the Hotspot > Basic panel. See this FAQ for more information.","title":"Wireless regulatory data"},{"location":"defaults/#restoring-settings","text":"If you've modified RaspAP's default configuration and the AP no longer works as expected, the defaults may be restored simply by running the Quick installer again or by following the steps described in the manual installation .","title":"Restoring settings"},{"location":"developers/","text":"Developer tips Overview There are as many different ways of developing software for single board computers, like the Raspberry Pi, as there are developers who do it. Likewise, opinions vary as to which approach is best. Ultimately it's the process that works for best for you that prevails. This briefly describes two approaches used by contributors to RaspAP. Remote host update Project contributor @glaszig maintains a working copy of RaspAP on his workstation and automatically copies changes over to the Pi. He's written this handy script to automate the process by way of fswatch . The script watches a local (dev) directory and pushes changes to the remote target (the Pi, in this case) via scp , or secure copy. This way, you can use your preferred integrated development environment (IDE) and simply push updates in the background to a remote system. More on fswatch here . An ancillary benefit with this method is that uncommitted changes to your local working copy are less vulnerable to being lost, in the event the remote system becomes inaccessible. It is also less susceptible to potential 'over-the-wire' network latency issues. Direct access via terminal If you're comfortable using a Linux-based text editor, developing directly on the Pi via the terminal is an alternate approach. This trades the IDE for Vim, Emacs or some other editor. While these tend to have steeper learning curves, the upside is their extreme portability and universality. That is, human readable, plain-text configuration files for terminal programs (often called 'dotfiles') are generally much more portable than those for IDEs. @billz's dev environment, via Twitter This means that you could, for example, save your dotfiles to GitHub and in effect \"bring them with you\" to whichever system you happen to be working on. The availability of Vim or Emacs is generally much greater than OS-specific IDEs, so in seconds (or at most a few minutes) you can setup your familiar dev environment. With the addition of tmux , you can have multiple panes in a single terminal window. Here is an excellent guide to getting started with the terminal.","title":"Developer tips"},{"location":"developers/#developer-tips","text":"","title":"Developer tips"},{"location":"developers/#overview","text":"There are as many different ways of developing software for single board computers, like the Raspberry Pi, as there are developers who do it. Likewise, opinions vary as to which approach is best. Ultimately it's the process that works for best for you that prevails. This briefly describes two approaches used by contributors to RaspAP.","title":"Overview"},{"location":"developers/#remote-host-update","text":"Project contributor @glaszig maintains a working copy of RaspAP on his workstation and automatically copies changes over to the Pi. He's written this handy script to automate the process by way of fswatch . The script watches a local (dev) directory and pushes changes to the remote target (the Pi, in this case) via scp , or secure copy. This way, you can use your preferred integrated development environment (IDE) and simply push updates in the background to a remote system. More on fswatch here . An ancillary benefit with this method is that uncommitted changes to your local working copy are less vulnerable to being lost, in the event the remote system becomes inaccessible. It is also less susceptible to potential 'over-the-wire' network latency issues.","title":"Remote host update"},{"location":"developers/#direct-access-via-terminal","text":"If you're comfortable using a Linux-based text editor, developing directly on the Pi via the terminal is an alternate approach. This trades the IDE for Vim, Emacs or some other editor. While these tend to have steeper learning curves, the upside is their extreme portability and universality. That is, human readable, plain-text configuration files for terminal programs (often called 'dotfiles') are generally much more portable than those for IDEs. @billz's dev environment, via Twitter This means that you could, for example, save your dotfiles to GitHub and in effect \"bring them with you\" to whichever system you happen to be working on. The availability of Vim or Emacs is generally much greater than OS-specific IDEs, so in seconds (or at most a few minutes) you can setup your familiar dev environment. With the addition of tmux , you can have multiple panes in a single terminal window. Here is an excellent guide to getting started with the terminal.","title":"Direct access via terminal"},{"location":"faq/","text":"FAQ This guide was written to address some frequently asked questions among users of RaspAP. FAQ items are organized into thematic sections, below, for easier reference. If you would like to see a new FAQ that you feel would assist other users, start a discussion or open an issue . General What do all these settings in the UI do? Changing them seems to have no effect. How do I prepare the SD card to connect to WiFi in headless mode? Can I use wlan0 and wlan1 rather than eth0 for my AP? Can I use RaspAP as a monitor only, without changing my configuration? Can I use RaspAP with my custom dnsmasq configuration? Troubleshooting Clients cannot obtain an IP address from the hotspot. My wifi network disappeared and I can't access the webgui. Help! My custom hostapd.conf / php.ini is gone. Help! I changed the admin password and forgot what it was. Help! RaspAP control panel works but there is no WiFi after reboot. Bridged AP mode is unstable or clients can't connect. Help! Managed mode AP doesn't work on the Pi Zero W. Help! WiFi scanning doesn't work or I get the error cannot execute \"wpa_cli reconfigure\" . Help! Integrations How do I integrate RaspAP with Pi-hole? Can I integrate RaspAP with Adguard Home? Can I configure RaspAP to work with a captive portal? How do I create an AP activation schedule? Can I configure a managed mode AP without using the UI? Can I configure an alternate port for RaspAP's web service? What breaks RaspAP when Docker is installed on the same system and how I can fix it? OpenVPN OpenVPN fails to start and/or I have no internet. Help! OpenVPN works but I have partial or no internet access. Help! OpenVPN is enabled but I am still blocked from country restricted websites. Help! Networking Why can't I access wireless mode 'N' (802.11n)? How do I exclude NAT rules from IP traffic on localhost? Why is the 802.11ac 5GHz option disabled in Configure hotspot? I think my country allows 5 GHz AP channels. Can I test this? Why is the maximum throughput of my 802.11n AP reduced by half? Install & upgrade How do I upgrade RaspAP? Do I need the RaspAP service to run at boot? Can the Quick Installer accept the default options without prompting me? How do I uninstall RaspAP? What do all these settings in the UI do? Changing them seems to have no effect. RaspAP manipulates several daemons, services and helper programs behind the scenes for you. In the footer of each management panel is a helpful \"Information provided by...\" label. These indicate which Linux daemon and/or program is being modified by the UI. Learning what these services are and how they work will go a long way toward demystifying things. For example, two of the best starting points for understanding hostapd (the service that implements 802.11 AP management) include the hostapd Linux documentation page and hostapd Wifi homepage . Important: After you choose Save settings for hostapd or dhcpcd , these services must be restarted for your changes to take effect. If you're not sure if your AP is behaving as expected, enable logging in the Logging tab of Hotspot and check the output. How do I prepare the SD card to connect to WiFi in headless mode? Since May 2016 , Raspbian has been able to copy wifi details from /boot/wpa_supplicant.conf into /etc/wpa_supplicant/wpa_supplicant.conf to automatically configure wireless network access. An example wpa_supplicant.conf file is shown below. Replace the fields with your settings: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=your_ISO-3166_two-letter_country_code network={ ssid=\"my_SSID\" psk=\"my_PSK\" key_mgmt=WPA-PSK } Can I use wlan0 and wlan1 rather than eth0 for my AP? Yes, this is supported by RaspAP. In this scenario, you may wish to use the wlan0 interface as a wireless client with wlan1 as the AP interface. Follow the steps below to enable this configuration: Bind the two adapters with the interface names wlan0 and wlan1 . Select wlan1 as the AP interface in Hotspot and Save Settings . Do not enable the Wifi AP (AP-STA) mode option. This is only needed when the client and AP are utilizing the same wlan adapter. (Re)start the hotspot. Important: Be aware that external WiFi adapters (ie, USB \"dongles\") vary greatly in terms of hardware capabilities and driver support. Many do not have support for AP mode, require a powered USB hub, manual driver and/or firmware installation or are otherwise not well suited for this application. Recommended adapters such as the Edimax 7811Un and Ralink RT5370 work out of the box with Raspberry OS (32-bit) Buster Lite. Adapters that require compiling of third-party drivers or other workarounds can be problematic. For this reason, you must verify your adapter before reporting an issue with this feature. Can I use RaspAP as a monitor only, without changing my configuration? Yes, RaspAP has support for a so-called \"monitor mode\". In config.php change the setting RASPI_MONITOR_ENABLED to true . This disables the ability to modify settings, start/stop daemons, shutdown or reboot the RPi. RaspAP will continue to report interface statistics, service settings and data usage as normal. See this for more information. Can I use RaspAP with my custom dnsmasq configuration? Yes, RaspAP supports this through the use of dnsmasq.d . The primary /etc/dnsmasq.d/090_raspap.conf managed by the UI includes the following directive to enable your custom .conf files: conf-dir=/etc/dnsmasq.d Configuration files placed in this directory will be used by the dnsmasq service and are untouched by the UI. Clients cannot obtain an IP address from the AP. Clients may receive a \"failed to obtain IP address\" or similar error message when connecting to your AP. These are the most frequent reasons for this error: A poor Wi-Fi signal from the access point. In this event, reduce the distance between your device and the AP. Your device does not operate properly with the encryption method set by the AP. The access point is misconfigured. The first and simplest fix is to reconnect the client to your Wi-Fi network. When you do this, the AP forgets the previous attempt and initiates a new process to assign an IP address to your device. Exact methods vary between devices, however most will have a 'Forget this network' option or similar in the Wi-Fi settings. This is shown in iOS, below: If clients still fail to connect, restart the AP. You may do this by choosing Restart hotspot from RaspAP. This reinitializes several related services in a predictable order and timing. Assuming these services are configured to restart automatically on reboot (the default behavior when RaspAP's installer is used) you may also simply reboot your Pi. RaspAP gives you control over many aspects of your Wi-Fi network, including DHCP. With its default settings , RaspAP has been rigorously tested and validated to provide connectivity in routed AP mode. If you suspect that RaspAP is misconfigured and not providing IP addresses to clients, you may troubleshoot this yourself. Clients connecting to your AP are assigned, or leased, an IP address with dnsmasq . You can see how this proces works by enabling the Log DHCP requests option in the DHCP Server > Logging tab. When a client connects to your AP, a typical dnsmasq-dhcp exchange follows this pattern: dnsmasq-dhcp[2516]: DHCPDISCOVER(wlan0) [MAC address] dnsmasq-dhcp[2516]: DHCPOFFER(wlan0) 10.3.141.249 [MAC address] dnsmasq-dhcp[2516]: DHCPREQUEST(wlan0) 10.3.141.249 [MAC address] dnsmasq-dhcp[2516]: DHCPACK(wlan0) 10.3.141.249 [MAC address] iPhone If one or more steps in this exchange are missing, either your device is unable to respond to the server's DHCPOFFER or the AP itself is misconfigured. Important : By default, the dnsmasq service listens on TCP/UDP port 53 and UDP port 67. If you have configured firewall software such as ufw or iptables to filter traffic on these ports, the service may not be able to respond to DHCP requests. As a last resort, you can assign a static IP address to your device. Copy the MAC address for your device as it appears above and create a new entry in RaspAP's DHCP Server > Static Leases tab. Save settings, restart dnsmasq and try connecting your client again. My wifi network disappeared and I can't access the webgui. Help! If you're running your Pi headless and are unable to access RaspAP's web interface from the default http://10.3.141.1/ address, do the following: Be sure your browser isn't forcing SSL by appending https:// to the address, which can result in misleading errors. This may sound obvious but it's reported frequently. (Related: add SSL support for RaspAP ) Connect your device to wired ethernet and access it via the browser or SSH on the eth0 interface using one of the methods described below. Check the logs for hostapd errors and reconfigure the service, or run the installer again to restore the default configuration . There are several methods you can use to determine your Pi's IP address. RaspAP's installer only configures a static IP address for the AP interface on wlan0 . If the AP has entered a failed state, you may still be able to connect on an alternate interface. Recent versions of the RPi OS kernel include the avahi-daemon which facilitates local network discovery via multicast DNS (mDNS). On client computers with the Bonjour service installed (all macOS machines and Windows PCs with Apple iTunes), try accessing your Pi by entering http://raspberrypi.local/ in the browser or via SSH with ssh pi@raspberrypi.local . If you don't have access to wired ethernet or the above methods fail, configure your Pi for USB-OTG, aka 'on-the-go' or gadget mode. Instructions for enabling USB-OTG vary between various models and not all Pi hardware has support for this. My custom hostapd.conf / php.ini is gone. Help! The installer applies a \"known good\" default configuration to some services, including hostapd . It will also, optionally, optimize php by changing a very limited number of settings. Your custom configurations haven't been lost however; they've been moved to the backups directory in /etc/raspap/backups . You are free to SSH in to restore those files to their rightful position. However, you may need to ensure that the RaspAP modifications are applied to your own custom configurations. I changed the admin password and forgot what it was. Help! Login credentials are stored in /etc/raspap/raspap.auth . The password is encrypted and cannot be edited manually. However, deleting this file with sudo rm /etc/raspap/raspap.auth will restore the default admin password. RaspAP control panel works but there is no WiFi after reboot. This problem often occurs when another program tries to reconfigure hostapd at startup. It can also happen when your RPi is configured as both a WiFi client and access point, known as a 'managed mode' AP. To address this, RaspAP has added a systemd init service to bring up networking services in a predictable order and timing after the Linux kernel is booted. You can check the status of this service with: sudo systemctl status raspapd.service The raspapd.service is optionally installed and enabled by the Quick Installer. It is also included in the manual setup steps. Bridged AP mode is unstable or clients can't connect. Help! RaspAP delegates all DHCP control to your router in bridged AP mode. If you have trouble connecting clients, start with this project's default configuration in routed AP mode first and try connecting a client. Enable logging for DHCP and hostapd to help you identify any problems. If you have no issues with client connectivity with the default routed AP, but cannot connect clients in bridged AP mode, in most cases the problem lies with your router\u2014not RaspAP. Check your router's web interface and DHCP settings. If clients disconnect intermittently, this often indicates an undervoltage issue with your RPi. Check the kernel log for any Under-voltage detected! errors. Be sure you are using an official 5.1V power supply (each model has different power requirements ) and detach any USB devices. Executing dmesg | grep br0 can also offer clues. Execute sudo dhclient -v to gain insights into DHCP requests between your device and router. A typical DHCP exchange follows this pattern: CLIENT -> DHCPDISCOVER SERVER -> DHCPOFFER CLIENT -> DHCPREQUEST SERVER -> DHCPACK If your device (the client) broadcasts DHCPDISCOVER, but there is no DHCPOFFER response from your router, you have a misconfiguration or other issue with your network. Troubleshooting client connectivity in bridged AP mode is not supported. No hard feelings. Managed mode AP doesn't work on the Pi Zero W. Help! See this walkthrough where the installation is described in detail. WiFi scanning doesn't work or I get the error cannot execute \"wpa_cli reconfigure\" . Help! On some configurations, the Configure WiFi client panel may appear empty. This project uses the wpa_supplicant command line client wpa_cli to populate a list of available wireless networks. If you can't execute this from the shell, neither can the web UI. For example, the results of this command: sudo wpa_cli -i wlan0 scan_results Failed to connect to non-global ctrl_ifname: wlan0 error: No such file or directory indicate a problem with the socket used to communicate with wpa_supplicant . You may also encounter errors such as \"Could not connect to wpa_supplicant: wlan0 - re-trying\". If this happens, first check the contents of wpa_supplicant with sudo cat /etc/wpa_supplicant/wpa_supplicant.conf . You should see, at minimum, the following: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 The above is present on clean installs of Raspbian. If you've made changes to this file, ensure that these lines appear first. Next, reinitialize the socket with: sudo wpa_supplicant -B -Dnl80211,wext -c/etc/wpa_supplicant/wpa_supplicant.conf -iwlan0 substituting wlan0 with your wireless interface, if necessary. You should then be able to perform scans as expected. Note: If you are using wpa_suplicant.conf to connect to your device with SSH on a wireless interface, do not reboot after running the Quick Installer. More information on this topic is available here . How do I integrate RaspAP with Pi-hole? There have been several discussions around integrating RaspAP with Pi-hole, with the end goal of hosting a complete AP and ad-blocker on a single device. Both projects rely on dnsmasq , so integration between them is tricky. There are now several options available to users of RaspAP. One option is to configure RaspAP to use a Pi-Hole installation on a separate device. Go to RaspAP's DHCP Server > Advanced page and enable the \"Upstream DNS Server\" option, add your Pi-Hole's DNS, save settings and restart dnsmasq. Alternatively, you can run Pi-Hole and RaspAP on the same device by operating RaspAP in bridged mode. Go to RaspAP's Hotspot > Advanced settings page, enable the \"Bridged AP mode\" option and restart your hotspot. Finally, and by popular demand, RaspAP has released its own ad blocking facility with support for custom blocklists. Can I integrate RaspAP with Adguard Home? Yes, you can run RaspAP and Adguard Home on the same device. Change Adguard Home\u2019s listening port to 5300 and bind to 127.0.0.1 , then go to RaspAP's > DHCP Server > Advanced page and enable the \"Upstream DNS Server\". Add 127.0.0.1#5300 as an upstream DNS Server. Save settings and restart dnsmasq. Tip via @firestrife23 Can I configure RaspAP to work with a captive portal? Yes, the nodogsplash project works just fine with RaspAP and is recommended over other methods. A detailed setup guide is available here . How do I create an AP activation schedule? This is a common function in consumer wireless routers. For example, let's assume you want to disable your AP on Monday through Friday between 02:00 and 08:00. You can implement this with cron to stop/start RaspAP's service control script at certain times. Run sudo crontab -e and add entries like so: # Stop RaspAP services at 02:00 on Monday through Friday 0 2 * * 1-5 sudo /etc/raspap/hostapd/servicestart.sh --action stop # Start RaspAP services at 08:00 on Monday through Friday 0 8 * * 1-5 sudo /etc/raspap/hostapd/servicestart.sh --seconds 3 For help with crontab, head over to crontab.guru . Can I configure a managed mode AP without using the UI? Let's assume you are creating a Raspbian image (or other supported OS) with scripts that setup RaspAP at first startup. In this scenario, to configure a managed mode AP you must manually connect via a browser, make some changes via the UI and then save your settings. This can be also be done programmatically. Assuming you have wpa_supplicant.conf fully populated , set the following values in /etc/raspap/hostapd.ini : LogEnable = 0 WifiAPEnable = 1 BridgedEnable = 0 WifiManaged = wlan0 substituting wlan0 for your AP interface, if necessary. You may then restart the raspap daemon with sudo systemctl restart raspapd.service . Can I configure an alternate port for RaspAP's web service? Yes, you can now do this from the Advanced tab in System. Manual steps for changing lighttpd's default port are included below. Edit /etc/lighttpd/lighttpd.conf and change the following line: server.port = 8080 then give the service a kick... sudo systemctl restart lighttpd.service You can then access RaspAP as before with the new port number in the URI, for example, http://raspberrypi.local:8080. This will allow you run another web server alongside lighttpd, if that is your goal. What breaks RaspAP when Docker is installed on the same system and how I can fix it? Installing RaspAP after installing Docker often results in connected clients not having internet access from the AP. The reason for this is Docker manipulates iptables rules to provide network isolation. Docker installs two custom iptables chains named DOCKER-USER and DOCKER , and it ensures that incoming packets are always checked by these two chains first. Docker also sets the policy for the FORWARD chain to DROP . When RaspAP is started in its default router mode, this will result in the AP not forwarding traffic anymore. If you want RaspAP to continue functioning as a router, you can add explicit ACCEPT rules to the DOCKER-USER chain to allow it: sudo iptables -I DOCKER-USER -i src_if -o dst_if -j ACCEPT When Docker is correctly installed after RaspAP, the following iptables chain should be present: Chain INPUT (policy ACCEPT) target prot opt source destination Chain FORWARD (policy ACCEPT) target prot opt source destination DOCKER-USER all -- anywhere anywhere DOCKER-ISOLATION-STAGE-1 all -- anywhere anywhere ACCEPT all -- anywhere anywhere ctstate RELATED,ESTABLISHED DOCKER all -- anywhere anywhere ACCEPT all -- anywhere anywhere ACCEPT all -- anywhere anywhere Chain OUTPUT (policy ACCEPT) target prot opt source destination Chain DOCKER (1 references) target prot opt source destination Additional info here and here . tl;dr: Install RaspAP first , followed by Docker, adding the explicit iptables rule sudo iptables -I DOCKER-USER -i src_if -o dst_if -j ACCEPT . OpenVPN fails to start and/or I have no internet. Help! RaspAP supports OpenVPN clients by uploading a valid .ovpn file to /etc/openvpn/client and, optionally, creating a login.conf file with your client auth credentials. Additionally, in line with the project's default configuration , the following iptables rules are added to forward traffic from OpenVPN's tun0 interface to your configured wireless interface ( wlan0 is the default): -A FORWARD -i tun0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT -A FORWARD -i wlan0 -o tun0 -j ACCEPT It is your responsibility to provide a valid .ovpn file; RaspAP does not attempt to validate the settings or RSA keys contained in this file. If OpenVPN fails to start, check for errors with sudo systemctl status openvpn-client@client and journalctl --identifier openvpn . OpenVPN works but I have partial or no internet access. Help! Issues like this are frequently reported. Begin by confirming the status of your connection: $ sudo systemctl status openvpn-client@client \u25cf openvpn-client@client.service - OpenVPN tunnel for client Loaded: loaded (/lib/systemd/system/openvpn-client@.service; enabled; vendor preset: enabled) Active: active (running) since Fri 2020-06-12 15:45:41 CDT; 1min 39s ago Docs: man:openvpn(8) https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage https://community.openvpn.net/openvpn/wiki/HOWTO Main PID: 2689 (openvpn) Status: \"Initialization Sequence Completed\" Tasks: 1 (limit: 2200) Memory: 1.1M CGroup: /system.slice/system-openvpn\\x2dclient.slice/openvpn-client@client.service \u2514\u25002689 /usr/sbin/openvpn --suppress-timestamps --nobind --config client.conf You can also use journalctl --identifier openvpn to identify any errors. If your internet access is intermittent or otherwise degraded with the openvpn-client active, the next step is to test your connection for packet loss and latency. There are many Linux tools you can use to diagnose your network. mtr is a good choice as it combines functionality of the traceroute and ping programs. Install and use it to perform your own evaluation: sudo apt install mtr -y sudo mtr -rwc 50 -i 0.2 -rw duckduckgo.com Start: 2020-06-13T11:42:26+0100 HOST: raspberrypi Loss% Snt Last Avg Best Wrst StDev 1.|-- 192.168.1.254 0.0% 50 26.8 27.1 26.5 31.4 0.8 2.|-- somerouter.net 88.0% 50 392.0 390.4 362.1 596.7 1.2 The results are reported as round-trip response times in milliseconds and the percentage of packet loss. If you see loss and/or latency like the above example, report it to your VPN provider or find another one. Read this for more on interpreting mtr results. Protip: free VPNs are frequently oversubscribed and usually not worth the trouble. OpenVPN is enabled but I am still blocked from country restricted websites. Help! Remote hosts use a variety of methods to defeat VPNs, some more aggressively than others. Many VPN providers will advise you to configure custom DNS servers to mitigate DNS leaks , which you can do from RaspAP's DHCP > Advanced tab. Others have specific VPN nodes to use with popular streaming services. Several users have reported that Firefox's DNS-over-HTTPS (DoH) has created problems with their VPN, in effect creating a DNS leak from the browser that circumvents RaspAP's DNS settings. Be sure to disable this \"feature\" when using a VPN service. If you suspect network traffic is not being routed through tun0 (or any other interface) for some reason, you can monitor this directly from your RPi with iftop : sudo apt install iftop sudo iftop -i [interface] Why can't I access wireless mode 'N' (802.11n)? On the Configure hotspot > Security tab, be sure to select CCMP for the Encryption Type. Save the settings and restart the hotspot. The wireless mode should be reported on clients as 802.11b/g/n. RaspAP: PHY Mode: 802.11n Channel: 1 Network Type: Infrastructure Security: WPA2 Personal Signal / Noise: -49 dBm / -86 dBm Transmit Rate: 73 If using TKIP for encryption with WPA, you will be restricted to 54 Mb/s. This is because the IEEE 802.11n draft prohibits using high throughput with WEP or TKIP ciphers. How do I exclude NAT rules from IP traffic on localhost? RaspAP's Quick Installer configures network-address-translation (NAT) with iptables rules, so that the RPi can act as an internet gateway to multiple hosts on a local network with a single public IP address. This is done by rewriting the addresses of IP packets as they pass through the NAT system. Many access points, including RaspAP, use a combination of IP forwarding and masquerading to achieve this. In some cases, NAT rules applied to localhost can interfere with other services running on an RPi. An example is the Plex Media Server, which has an API that listens on localhost. As of this writing, the Plex API has been built to not authenticate communication between service processes of the server. This can cause a failure to communicate with the Plex API or similar add-on services on your RPi. The solution is to add a NAT rule ahead of the rule RaspAP installs to not apply NAT to connections destined to 127.0.0.0/8: $ sudo iptables -t nat -I POSTROUTING -d 127.0.0.0/8 -j ACCEPT The resulting iptables chain should look something like this: $ sudo iptables -t nat -L -n -v Chain PREROUTING (policy ACCEPT 31 packets, 4810 bytes) pkts bytes target prot opt in out source destination Chain INPUT (policy ACCEPT 31 packets, 4810 bytes) pkts bytes target prot opt in out source destination Chain OUTPUT (policy ACCEPT 23 packets, 1338 bytes) pkts bytes target prot opt in out source destination Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination 17 999 ACCEPT all -- * * 0.0.0.0/0 127.0.0.0/8 2422 158K MASQUERADE all -- * * 0.0.0.0/0 0.0.0.0/0 Refer to this issue . Why is the 802.11ac 5GHz wireless mode option disabled in Configure hotspot? Short answer: because of wireless regulatory restrictions for your country. If the AC option is disabled on your RPi, there are two small configuration changes you can make to enable it. First, configure your RPi's wireless regulatory domain with sudo iw reg set US . Next, on the Advanced tab of Configure hotspot , choose \"United States\" as the country code and save settings. You can now choose 802.11ac from the wireless mode select on the Basic tab. Choosing the AC wireless mode will populate the supported 5 GHz channels for you. Longer answer: AC support is not simply a function of your device's hardware capabilities. It must also take into account regulatory restrictions of the wireless spectrum. The regulatory info for brcmfmac , the kernel driver that supports the Broadcom wireless chipset, is embedded in the firmware of RPi models 3B+ and 4. There are lots of international issues with WiFi that restrict channel use, transmission power, etc. on a regional and per-country basis. As a result, only combinations of certain frequencies (channels) and countries are capable of hosting an AC access point with the RPi's wireless adapter. If the country configured on your RPi does not allow use of a particular segment of the 5 GHz wireless spectrum, an AC configured AP will fail to start. Errors like these are common: nl80211: Failed to set channel (freq=5180): -22 (Invalid argument) hostapd: Could not set channel for kernel driver In testing, stable AP's on the RPi's supported AC channels were only reliably obtained with 'US' as the regulatory domain. To get a list of the supported channels on your RPi for the 2.4 and 5 GHz bands, use iw phy phy0 channels . Refer to this issue . I think my country allows 5 GHz AP channels. Can I test this? Yes, you can. In the spirit of experimentation, this project allows you to override RaspAP's default configuration . The file wireless.json contains the regulatory domains and channels for the 2.4 and 5 GHz bands. Add a valid ISO Alpha-2 country code to the list of 5Ghz_max48ch countries and save the file. Next, edit includes/config.php and add the same country to this constant: // Constant for the 5GHz wireless regulatory domain define('RASPI_5GHZ_ISO_ALPHA2', array('US')); The Configure hotspot page will now let you select AC as a wireless mode option for your country. If you succeed in creating a stable AP, feel free to share your results in a discussion . Note: it is recommended to monitor logs such as dmesg and the hostapd error log (available in the Logfile output tab of RaspAP) while doing this. Bug reports like \"AC doesn't work\" and/or troubleshooting requests will not be considered. No hard feelings. Why is the maximum throughput of my 802.11n AP reduced by half? In order to achieve optimal throughput with 802.11n, the wireless stream must operate at a 40 MHz wide channel on the 2.4 GHz band. A 20 MHz channel will restrict you to 72 Mbps. Your hostapd.conf might have the required settings, but this is no guarantee of a 40 MHz channel. In practice, this can be quite difficult due to interference on the 2.4 GHz band. There are many things that will cause an AP to fallback to 20 MHz. The most common reason is if an AP detects another wireless network within 40 MHz, i.e. two channels, of its own channel. For example, if an AP is set to channel 6, another network operating anywhere from channel 4 to 8 will trigger a fallback. hostapd will usually report a fallback like so: 20/40 MHz operation not permitted on channel pri=3 sec=7 based on overlapping BSSes For more information on optimizing 802.11n, refer to this resource . Generally speaking, the 5 GHz band has substantially greater capacity due to more non-overlapping radio channels and less radio interference as compared to the 2.4 GHz band. How do I upgrade RaspAP? Upgrading an existing install without changing your configuration is very straightforward. To upgrade to the latest release version, simply run the Quick Installer with the --upgrade option: curl -sL https://install.raspap.com | bash -s -- --upgrade The installer upgrade is idempotent , meaning it can be repeated an arbitrary number of times and the result will be as if it had been done only once. If you choose this method, you're done! Confirm the upgrade by checking the release version on the About page. If you want to install a specific version you can do so by referencing a tag: sudo git fetch --tags sudo git checkout 2.5 A tag is a pointer that isn't connected to the main development tree that git knows about. As a result, git will reply that you're in a 'detached HEAD' state. This isn't a big deal, it just means that you have a specific version of the code that isn't connected to the git tree. Alternatively, if you want the latest bleeding edge commits from the master branch, use the following: sudo git checkout -b master sudo git pull origin master If you've customized your installation by editing config.php , update the release version in this file: sudo nano /var/www/html/includes/config.php Change the first line to the release version, save the file and exit. Note: RASPI_VERSION is only used on the About page; it does not affect any other functionality. define('RASPI_VERSION', '2.5'); Finally, give the lighttpd service a kick with: sudo systemctl restart lighttpd.service Whichever method you choose (installer upgrade, specific release or latest updates), your RaspAP configuration won't be changed. Do I need the RaspAP service to run at boot? If you are using your RPi as a client on a WiFi network (also known as managed mode) and hosting an access point simultaneously, the raspapd.service will ensure that your hotspot is active after a reboot. It does this by detecting WiFi client AP mode, adding the uap0 interface and starting up networking services in a specific order. If your RPi is configured with wired ethernet ( eth0 ) or you haven't experienced problems with the AP starting on boot, you can disable the RaspAP daemon like so: sudo systemctl disable raspapd.service Can the Quick Installer accept the default options without prompting me? Yes, the Quick Installer has a non-interactive mode that lets you perform unattended setups. This mode assumes \"yes\" as an answer to all prompts. You can do an unattended install of RaspAP by appending the --yes command-line option, like so: curl -sL https://install.raspap.com | bash -s -- --yes The options -y or --assume-yes are also accepted and have the same result. How do I uninstall RaspAP? We have provided an uninstall script to remove RaspAP cleanly, and also restore any backups of your configuration that were created before RaspAP was installed. The uninstall script is located in installers/uninstall.sh . To start the uninstaller, simply run the following from the project root folder (default location is /var/www/html ): cd /var/www/html sudo installers/uninstall.sh","title":"FAQ"},{"location":"faq/#faq","text":"This guide was written to address some frequently asked questions among users of RaspAP. FAQ items are organized into thematic sections, below, for easier reference. If you would like to see a new FAQ that you feel would assist other users, start a discussion or open an issue .","title":"FAQ"},{"location":"faq/#general","text":"What do all these settings in the UI do? Changing them seems to have no effect. How do I prepare the SD card to connect to WiFi in headless mode? Can I use wlan0 and wlan1 rather than eth0 for my AP? Can I use RaspAP as a monitor only, without changing my configuration? Can I use RaspAP with my custom dnsmasq configuration?","title":"General"},{"location":"faq/#troubleshooting","text":"Clients cannot obtain an IP address from the hotspot. My wifi network disappeared and I can't access the webgui. Help! My custom hostapd.conf / php.ini is gone. Help! I changed the admin password and forgot what it was. Help! RaspAP control panel works but there is no WiFi after reboot. Bridged AP mode is unstable or clients can't connect. Help! Managed mode AP doesn't work on the Pi Zero W. Help! WiFi scanning doesn't work or I get the error cannot execute \"wpa_cli reconfigure\" . Help!","title":"Troubleshooting"},{"location":"faq/#integrations","text":"How do I integrate RaspAP with Pi-hole? Can I integrate RaspAP with Adguard Home? Can I configure RaspAP to work with a captive portal? How do I create an AP activation schedule? Can I configure a managed mode AP without using the UI? Can I configure an alternate port for RaspAP's web service? What breaks RaspAP when Docker is installed on the same system and how I can fix it?","title":"Integrations"},{"location":"faq/#openvpn","text":"OpenVPN fails to start and/or I have no internet. Help! OpenVPN works but I have partial or no internet access. Help! OpenVPN is enabled but I am still blocked from country restricted websites. Help!","title":"OpenVPN"},{"location":"faq/#networking","text":"Why can't I access wireless mode 'N' (802.11n)? How do I exclude NAT rules from IP traffic on localhost? Why is the 802.11ac 5GHz option disabled in Configure hotspot? I think my country allows 5 GHz AP channels. Can I test this? Why is the maximum throughput of my 802.11n AP reduced by half?","title":"Networking"},{"location":"faq/#install-upgrade","text":"How do I upgrade RaspAP? Do I need the RaspAP service to run at boot? Can the Quick Installer accept the default options without prompting me? How do I uninstall RaspAP?","title":"Install &amp; upgrade"},{"location":"faq/#what-do-all-these-settings-in-the-ui-do-changing-them-seems-to-have-no-effect","text":"RaspAP manipulates several daemons, services and helper programs behind the scenes for you. In the footer of each management panel is a helpful \"Information provided by...\" label. These indicate which Linux daemon and/or program is being modified by the UI. Learning what these services are and how they work will go a long way toward demystifying things. For example, two of the best starting points for understanding hostapd (the service that implements 802.11 AP management) include the hostapd Linux documentation page and hostapd Wifi homepage . Important: After you choose Save settings for hostapd or dhcpcd , these services must be restarted for your changes to take effect. If you're not sure if your AP is behaving as expected, enable logging in the Logging tab of Hotspot and check the output.","title":"What do all these settings in the UI do? Changing them seems to have no effect."},{"location":"faq/#how-do-i-prepare-the-sd-card-to-connect-to-wifi-in-headless-mode","text":"Since May 2016 , Raspbian has been able to copy wifi details from /boot/wpa_supplicant.conf into /etc/wpa_supplicant/wpa_supplicant.conf to automatically configure wireless network access. An example wpa_supplicant.conf file is shown below. Replace the fields with your settings: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=your_ISO-3166_two-letter_country_code network={ ssid=\"my_SSID\" psk=\"my_PSK\" key_mgmt=WPA-PSK }","title":"How do I prepare the SD card to connect to WiFi in headless mode?"},{"location":"faq/#can-i-use-wlan0-and-wlan1-rather-than-eth0-for-my-ap","text":"Yes, this is supported by RaspAP. In this scenario, you may wish to use the wlan0 interface as a wireless client with wlan1 as the AP interface. Follow the steps below to enable this configuration: Bind the two adapters with the interface names wlan0 and wlan1 . Select wlan1 as the AP interface in Hotspot and Save Settings . Do not enable the Wifi AP (AP-STA) mode option. This is only needed when the client and AP are utilizing the same wlan adapter. (Re)start the hotspot. Important: Be aware that external WiFi adapters (ie, USB \"dongles\") vary greatly in terms of hardware capabilities and driver support. Many do not have support for AP mode, require a powered USB hub, manual driver and/or firmware installation or are otherwise not well suited for this application. Recommended adapters such as the Edimax 7811Un and Ralink RT5370 work out of the box with Raspberry OS (32-bit) Buster Lite. Adapters that require compiling of third-party drivers or other workarounds can be problematic. For this reason, you must verify your adapter before reporting an issue with this feature.","title":"Can I use wlan0 and wlan1 rather than eth0 for my AP?"},{"location":"faq/#can-i-use-raspap-as-a-monitor-only-without-changing-my-configuration","text":"Yes, RaspAP has support for a so-called \"monitor mode\". In config.php change the setting RASPI_MONITOR_ENABLED to true . This disables the ability to modify settings, start/stop daemons, shutdown or reboot the RPi. RaspAP will continue to report interface statistics, service settings and data usage as normal. See this for more information.","title":"Can I use RaspAP as a monitor only, without changing my configuration?"},{"location":"faq/#can-i-use-raspap-with-my-custom-dnsmasq-configuration","text":"Yes, RaspAP supports this through the use of dnsmasq.d . The primary /etc/dnsmasq.d/090_raspap.conf managed by the UI includes the following directive to enable your custom .conf files: conf-dir=/etc/dnsmasq.d Configuration files placed in this directory will be used by the dnsmasq service and are untouched by the UI.","title":" Can I use RaspAP with my custom dnsmasq configuration?"},{"location":"faq/#clients-cannot-obtain-an-ip-address-from-the-ap","text":"Clients may receive a \"failed to obtain IP address\" or similar error message when connecting to your AP. These are the most frequent reasons for this error: A poor Wi-Fi signal from the access point. In this event, reduce the distance between your device and the AP. Your device does not operate properly with the encryption method set by the AP. The access point is misconfigured. The first and simplest fix is to reconnect the client to your Wi-Fi network. When you do this, the AP forgets the previous attempt and initiates a new process to assign an IP address to your device. Exact methods vary between devices, however most will have a 'Forget this network' option or similar in the Wi-Fi settings. This is shown in iOS, below: If clients still fail to connect, restart the AP. You may do this by choosing Restart hotspot from RaspAP. This reinitializes several related services in a predictable order and timing. Assuming these services are configured to restart automatically on reboot (the default behavior when RaspAP's installer is used) you may also simply reboot your Pi. RaspAP gives you control over many aspects of your Wi-Fi network, including DHCP. With its default settings , RaspAP has been rigorously tested and validated to provide connectivity in routed AP mode. If you suspect that RaspAP is misconfigured and not providing IP addresses to clients, you may troubleshoot this yourself. Clients connecting to your AP are assigned, or leased, an IP address with dnsmasq . You can see how this proces works by enabling the Log DHCP requests option in the DHCP Server > Logging tab. When a client connects to your AP, a typical dnsmasq-dhcp exchange follows this pattern: dnsmasq-dhcp[2516]: DHCPDISCOVER(wlan0) [MAC address] dnsmasq-dhcp[2516]: DHCPOFFER(wlan0) 10.3.141.249 [MAC address] dnsmasq-dhcp[2516]: DHCPREQUEST(wlan0) 10.3.141.249 [MAC address] dnsmasq-dhcp[2516]: DHCPACK(wlan0) 10.3.141.249 [MAC address] iPhone If one or more steps in this exchange are missing, either your device is unable to respond to the server's DHCPOFFER or the AP itself is misconfigured. Important : By default, the dnsmasq service listens on TCP/UDP port 53 and UDP port 67. If you have configured firewall software such as ufw or iptables to filter traffic on these ports, the service may not be able to respond to DHCP requests. As a last resort, you can assign a static IP address to your device. Copy the MAC address for your device as it appears above and create a new entry in RaspAP's DHCP Server > Static Leases tab. Save settings, restart dnsmasq and try connecting your client again.","title":"Clients cannot obtain an IP address from the AP."},{"location":"faq/#my-wifi-network-disappeared-and-i-cant-access-the-webgui-help","text":"If you're running your Pi headless and are unable to access RaspAP's web interface from the default http://10.3.141.1/ address, do the following: Be sure your browser isn't forcing SSL by appending https:// to the address, which can result in misleading errors. This may sound obvious but it's reported frequently. (Related: add SSL support for RaspAP ) Connect your device to wired ethernet and access it via the browser or SSH on the eth0 interface using one of the methods described below. Check the logs for hostapd errors and reconfigure the service, or run the installer again to restore the default configuration . There are several methods you can use to determine your Pi's IP address. RaspAP's installer only configures a static IP address for the AP interface on wlan0 . If the AP has entered a failed state, you may still be able to connect on an alternate interface. Recent versions of the RPi OS kernel include the avahi-daemon which facilitates local network discovery via multicast DNS (mDNS). On client computers with the Bonjour service installed (all macOS machines and Windows PCs with Apple iTunes), try accessing your Pi by entering http://raspberrypi.local/ in the browser or via SSH with ssh pi@raspberrypi.local . If you don't have access to wired ethernet or the above methods fail, configure your Pi for USB-OTG, aka 'on-the-go' or gadget mode. Instructions for enabling USB-OTG vary between various models and not all Pi hardware has support for this.","title":"My wifi network disappeared and I can't access the webgui. Help!"},{"location":"faq/#my-custom-hostapdconf-phpini-is-gone-help","text":"The installer applies a \"known good\" default configuration to some services, including hostapd . It will also, optionally, optimize php by changing a very limited number of settings. Your custom configurations haven't been lost however; they've been moved to the backups directory in /etc/raspap/backups . You are free to SSH in to restore those files to their rightful position. However, you may need to ensure that the RaspAP modifications are applied to your own custom configurations.","title":"My custom hostapd.conf / php.ini is gone. Help!"},{"location":"faq/#i-changed-the-admin-password-and-forgot-what-it-was-help","text":"Login credentials are stored in /etc/raspap/raspap.auth . The password is encrypted and cannot be edited manually. However, deleting this file with sudo rm /etc/raspap/raspap.auth will restore the default admin password.","title":"I changed the admin password and forgot what it was. Help!"},{"location":"faq/#raspap-control-panel-works-but-there-is-no-wifi-after-reboot","text":"This problem often occurs when another program tries to reconfigure hostapd at startup. It can also happen when your RPi is configured as both a WiFi client and access point, known as a 'managed mode' AP. To address this, RaspAP has added a systemd init service to bring up networking services in a predictable order and timing after the Linux kernel is booted. You can check the status of this service with: sudo systemctl status raspapd.service The raspapd.service is optionally installed and enabled by the Quick Installer. It is also included in the manual setup steps.","title":"RaspAP control panel works but there is no WiFi after reboot."},{"location":"faq/#bridged-ap-mode-is-unstable-or-clients-cant-connect-help","text":"RaspAP delegates all DHCP control to your router in bridged AP mode. If you have trouble connecting clients, start with this project's default configuration in routed AP mode first and try connecting a client. Enable logging for DHCP and hostapd to help you identify any problems. If you have no issues with client connectivity with the default routed AP, but cannot connect clients in bridged AP mode, in most cases the problem lies with your router\u2014not RaspAP. Check your router's web interface and DHCP settings. If clients disconnect intermittently, this often indicates an undervoltage issue with your RPi. Check the kernel log for any Under-voltage detected! errors. Be sure you are using an official 5.1V power supply (each model has different power requirements ) and detach any USB devices. Executing dmesg | grep br0 can also offer clues. Execute sudo dhclient -v to gain insights into DHCP requests between your device and router. A typical DHCP exchange follows this pattern: CLIENT -> DHCPDISCOVER SERVER -> DHCPOFFER CLIENT -> DHCPREQUEST SERVER -> DHCPACK If your device (the client) broadcasts DHCPDISCOVER, but there is no DHCPOFFER response from your router, you have a misconfiguration or other issue with your network. Troubleshooting client connectivity in bridged AP mode is not supported. No hard feelings.","title":"Bridged AP mode is unstable or clients can't connect. Help!"},{"location":"faq/#managed-mode-ap-doesnt-work-on-the-pi-zero-w-help","text":"See this walkthrough where the installation is described in detail.","title":"Managed mode AP doesn't work on the Pi Zero W. Help!"},{"location":"faq/#wifi-scanning-doesnt-work-or-i-get-the-error-cannot-execute-wpa_cli-reconfigure-help","text":"On some configurations, the Configure WiFi client panel may appear empty. This project uses the wpa_supplicant command line client wpa_cli to populate a list of available wireless networks. If you can't execute this from the shell, neither can the web UI. For example, the results of this command: sudo wpa_cli -i wlan0 scan_results Failed to connect to non-global ctrl_ifname: wlan0 error: No such file or directory indicate a problem with the socket used to communicate with wpa_supplicant . You may also encounter errors such as \"Could not connect to wpa_supplicant: wlan0 - re-trying\". If this happens, first check the contents of wpa_supplicant with sudo cat /etc/wpa_supplicant/wpa_supplicant.conf . You should see, at minimum, the following: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 The above is present on clean installs of Raspbian. If you've made changes to this file, ensure that these lines appear first. Next, reinitialize the socket with: sudo wpa_supplicant -B -Dnl80211,wext -c/etc/wpa_supplicant/wpa_supplicant.conf -iwlan0 substituting wlan0 with your wireless interface, if necessary. You should then be able to perform scans as expected. Note: If you are using wpa_suplicant.conf to connect to your device with SSH on a wireless interface, do not reboot after running the Quick Installer. More information on this topic is available here .","title":"WiFi scanning doesn't work or I get the error cannot execute \"wpa_cli reconfigure\". Help!"},{"location":"faq/#how-do-i-integrate-raspap-with-pi-hole","text":"There have been several discussions around integrating RaspAP with Pi-hole, with the end goal of hosting a complete AP and ad-blocker on a single device. Both projects rely on dnsmasq , so integration between them is tricky. There are now several options available to users of RaspAP. One option is to configure RaspAP to use a Pi-Hole installation on a separate device. Go to RaspAP's DHCP Server > Advanced page and enable the \"Upstream DNS Server\" option, add your Pi-Hole's DNS, save settings and restart dnsmasq. Alternatively, you can run Pi-Hole and RaspAP on the same device by operating RaspAP in bridged mode. Go to RaspAP's Hotspot > Advanced settings page, enable the \"Bridged AP mode\" option and restart your hotspot. Finally, and by popular demand, RaspAP has released its own ad blocking facility with support for custom blocklists.","title":"How do I integrate RaspAP with Pi-hole?"},{"location":"faq/#can-i-integrate-raspap-with-adguard-home","text":"Yes, you can run RaspAP and Adguard Home on the same device. Change Adguard Home\u2019s listening port to 5300 and bind to 127.0.0.1 , then go to RaspAP's > DHCP Server > Advanced page and enable the \"Upstream DNS Server\". Add 127.0.0.1#5300 as an upstream DNS Server. Save settings and restart dnsmasq. Tip via @firestrife23","title":"Can I integrate RaspAP with Adguard Home?"},{"location":"faq/#can-i-configure-raspap-to-work-with-a-captive-portal","text":"Yes, the nodogsplash project works just fine with RaspAP and is recommended over other methods. A detailed setup guide is available here .","title":"Can I configure RaspAP to work with a captive portal?"},{"location":"faq/#how-do-i-create-an-ap-activation-schedule","text":"This is a common function in consumer wireless routers. For example, let's assume you want to disable your AP on Monday through Friday between 02:00 and 08:00. You can implement this with cron to stop/start RaspAP's service control script at certain times. Run sudo crontab -e and add entries like so: # Stop RaspAP services at 02:00 on Monday through Friday 0 2 * * 1-5 sudo /etc/raspap/hostapd/servicestart.sh --action stop # Start RaspAP services at 08:00 on Monday through Friday 0 8 * * 1-5 sudo /etc/raspap/hostapd/servicestart.sh --seconds 3 For help with crontab, head over to crontab.guru .","title":"How do I create an AP activation schedule?"},{"location":"faq/#can-i-configure-a-managed-mode-ap-without-using-the-ui","text":"Let's assume you are creating a Raspbian image (or other supported OS) with scripts that setup RaspAP at first startup. In this scenario, to configure a managed mode AP you must manually connect via a browser, make some changes via the UI and then save your settings. This can be also be done programmatically. Assuming you have wpa_supplicant.conf fully populated , set the following values in /etc/raspap/hostapd.ini : LogEnable = 0 WifiAPEnable = 1 BridgedEnable = 0 WifiManaged = wlan0 substituting wlan0 for your AP interface, if necessary. You may then restart the raspap daemon with sudo systemctl restart raspapd.service .","title":" Can I configure a managed mode AP without using the UI?"},{"location":"faq/#can-i-configure-an-alternate-port-for-raspaps-web-service","text":"Yes, you can now do this from the Advanced tab in System. Manual steps for changing lighttpd's default port are included below. Edit /etc/lighttpd/lighttpd.conf and change the following line: server.port = 8080 then give the service a kick... sudo systemctl restart lighttpd.service You can then access RaspAP as before with the new port number in the URI, for example, http://raspberrypi.local:8080. This will allow you run another web server alongside lighttpd, if that is your goal.","title":"Can I configure an alternate port for RaspAP's web service?"},{"location":"faq/#what-breaks-raspap-when-docker-is-installed-on-the-same-system-and-how-i-can-fix-it","text":"Installing RaspAP after installing Docker often results in connected clients not having internet access from the AP. The reason for this is Docker manipulates iptables rules to provide network isolation. Docker installs two custom iptables chains named DOCKER-USER and DOCKER , and it ensures that incoming packets are always checked by these two chains first. Docker also sets the policy for the FORWARD chain to DROP . When RaspAP is started in its default router mode, this will result in the AP not forwarding traffic anymore. If you want RaspAP to continue functioning as a router, you can add explicit ACCEPT rules to the DOCKER-USER chain to allow it: sudo iptables -I DOCKER-USER -i src_if -o dst_if -j ACCEPT When Docker is correctly installed after RaspAP, the following iptables chain should be present: Chain INPUT (policy ACCEPT) target prot opt source destination Chain FORWARD (policy ACCEPT) target prot opt source destination DOCKER-USER all -- anywhere anywhere DOCKER-ISOLATION-STAGE-1 all -- anywhere anywhere ACCEPT all -- anywhere anywhere ctstate RELATED,ESTABLISHED DOCKER all -- anywhere anywhere ACCEPT all -- anywhere anywhere ACCEPT all -- anywhere anywhere Chain OUTPUT (policy ACCEPT) target prot opt source destination Chain DOCKER (1 references) target prot opt source destination Additional info here and here . tl;dr: Install RaspAP first , followed by Docker, adding the explicit iptables rule sudo iptables -I DOCKER-USER -i src_if -o dst_if -j ACCEPT .","title":"What breaks RaspAP when Docker is installed on the same system and how I can fix it?"},{"location":"faq/#openvpn-fails-to-start-andor-i-have-no-internet-help","text":"RaspAP supports OpenVPN clients by uploading a valid .ovpn file to /etc/openvpn/client and, optionally, creating a login.conf file with your client auth credentials. Additionally, in line with the project's default configuration , the following iptables rules are added to forward traffic from OpenVPN's tun0 interface to your configured wireless interface ( wlan0 is the default): -A FORWARD -i tun0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT -A FORWARD -i wlan0 -o tun0 -j ACCEPT It is your responsibility to provide a valid .ovpn file; RaspAP does not attempt to validate the settings or RSA keys contained in this file. If OpenVPN fails to start, check for errors with sudo systemctl status openvpn-client@client and journalctl --identifier openvpn .","title":" OpenVPN fails to start and/or I have no internet. Help!"},{"location":"faq/#openvpn-works-but-i-have-partial-or-no-internet-access-help","text":"Issues like this are frequently reported. Begin by confirming the status of your connection: $ sudo systemctl status openvpn-client@client \u25cf openvpn-client@client.service - OpenVPN tunnel for client Loaded: loaded (/lib/systemd/system/openvpn-client@.service; enabled; vendor preset: enabled) Active: active (running) since Fri 2020-06-12 15:45:41 CDT; 1min 39s ago Docs: man:openvpn(8) https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage https://community.openvpn.net/openvpn/wiki/HOWTO Main PID: 2689 (openvpn) Status: \"Initialization Sequence Completed\" Tasks: 1 (limit: 2200) Memory: 1.1M CGroup: /system.slice/system-openvpn\\x2dclient.slice/openvpn-client@client.service \u2514\u25002689 /usr/sbin/openvpn --suppress-timestamps --nobind --config client.conf You can also use journalctl --identifier openvpn to identify any errors. If your internet access is intermittent or otherwise degraded with the openvpn-client active, the next step is to test your connection for packet loss and latency. There are many Linux tools you can use to diagnose your network. mtr is a good choice as it combines functionality of the traceroute and ping programs. Install and use it to perform your own evaluation: sudo apt install mtr -y sudo mtr -rwc 50 -i 0.2 -rw duckduckgo.com Start: 2020-06-13T11:42:26+0100 HOST: raspberrypi Loss% Snt Last Avg Best Wrst StDev 1.|-- 192.168.1.254 0.0% 50 26.8 27.1 26.5 31.4 0.8 2.|-- somerouter.net 88.0% 50 392.0 390.4 362.1 596.7 1.2 The results are reported as round-trip response times in milliseconds and the percentage of packet loss. If you see loss and/or latency like the above example, report it to your VPN provider or find another one. Read this for more on interpreting mtr results. Protip: free VPNs are frequently oversubscribed and usually not worth the trouble.","title":"OpenVPN works but I have partial or no internet access. Help!"},{"location":"faq/#openvpn-is-enabled-but-i-am-still-blocked-from-country-restricted-websites-help","text":"Remote hosts use a variety of methods to defeat VPNs, some more aggressively than others. Many VPN providers will advise you to configure custom DNS servers to mitigate DNS leaks , which you can do from RaspAP's DHCP > Advanced tab. Others have specific VPN nodes to use with popular streaming services. Several users have reported that Firefox's DNS-over-HTTPS (DoH) has created problems with their VPN, in effect creating a DNS leak from the browser that circumvents RaspAP's DNS settings. Be sure to disable this \"feature\" when using a VPN service. If you suspect network traffic is not being routed through tun0 (or any other interface) for some reason, you can monitor this directly from your RPi with iftop : sudo apt install iftop sudo iftop -i [interface]","title":"OpenVPN is enabled but I am still blocked from country restricted websites. Help!"},{"location":"faq/#why-cant-i-access-wireless-mode-n-80211n","text":"On the Configure hotspot > Security tab, be sure to select CCMP for the Encryption Type. Save the settings and restart the hotspot. The wireless mode should be reported on clients as 802.11b/g/n. RaspAP: PHY Mode: 802.11n Channel: 1 Network Type: Infrastructure Security: WPA2 Personal Signal / Noise: -49 dBm / -86 dBm Transmit Rate: 73 If using TKIP for encryption with WPA, you will be restricted to 54 Mb/s. This is because the IEEE 802.11n draft prohibits using high throughput with WEP or TKIP ciphers.","title":"Why can't I access wireless mode 'N' (802.11n)?"},{"location":"faq/#how-do-i-exclude-nat-rules-from-ip-traffic-on-localhost","text":"RaspAP's Quick Installer configures network-address-translation (NAT) with iptables rules, so that the RPi can act as an internet gateway to multiple hosts on a local network with a single public IP address. This is done by rewriting the addresses of IP packets as they pass through the NAT system. Many access points, including RaspAP, use a combination of IP forwarding and masquerading to achieve this. In some cases, NAT rules applied to localhost can interfere with other services running on an RPi. An example is the Plex Media Server, which has an API that listens on localhost. As of this writing, the Plex API has been built to not authenticate communication between service processes of the server. This can cause a failure to communicate with the Plex API or similar add-on services on your RPi. The solution is to add a NAT rule ahead of the rule RaspAP installs to not apply NAT to connections destined to 127.0.0.0/8: $ sudo iptables -t nat -I POSTROUTING -d 127.0.0.0/8 -j ACCEPT The resulting iptables chain should look something like this: $ sudo iptables -t nat -L -n -v Chain PREROUTING (policy ACCEPT 31 packets, 4810 bytes) pkts bytes target prot opt in out source destination Chain INPUT (policy ACCEPT 31 packets, 4810 bytes) pkts bytes target prot opt in out source destination Chain OUTPUT (policy ACCEPT 23 packets, 1338 bytes) pkts bytes target prot opt in out source destination Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination 17 999 ACCEPT all -- * * 0.0.0.0/0 127.0.0.0/8 2422 158K MASQUERADE all -- * * 0.0.0.0/0 0.0.0.0/0 Refer to this issue .","title":" How do I exclude NAT rules from IP traffic on localhost?"},{"location":"faq/#why-is-the-80211ac-5ghz-wireless-mode-option-disabled-in-configure-hotspot","text":"Short answer: because of wireless regulatory restrictions for your country. If the AC option is disabled on your RPi, there are two small configuration changes you can make to enable it. First, configure your RPi's wireless regulatory domain with sudo iw reg set US . Next, on the Advanced tab of Configure hotspot , choose \"United States\" as the country code and save settings. You can now choose 802.11ac from the wireless mode select on the Basic tab. Choosing the AC wireless mode will populate the supported 5 GHz channels for you. Longer answer: AC support is not simply a function of your device's hardware capabilities. It must also take into account regulatory restrictions of the wireless spectrum. The regulatory info for brcmfmac , the kernel driver that supports the Broadcom wireless chipset, is embedded in the firmware of RPi models 3B+ and 4. There are lots of international issues with WiFi that restrict channel use, transmission power, etc. on a regional and per-country basis. As a result, only combinations of certain frequencies (channels) and countries are capable of hosting an AC access point with the RPi's wireless adapter. If the country configured on your RPi does not allow use of a particular segment of the 5 GHz wireless spectrum, an AC configured AP will fail to start. Errors like these are common: nl80211: Failed to set channel (freq=5180): -22 (Invalid argument) hostapd: Could not set channel for kernel driver In testing, stable AP's on the RPi's supported AC channels were only reliably obtained with 'US' as the regulatory domain. To get a list of the supported channels on your RPi for the 2.4 and 5 GHz bands, use iw phy phy0 channels . Refer to this issue .","title":" Why is the 802.11ac 5GHz wireless mode option disabled in Configure hotspot?"},{"location":"faq/#i-think-my-country-allows-5-ghz-ap-channels-can-i-test-this","text":"Yes, you can. In the spirit of experimentation, this project allows you to override RaspAP's default configuration . The file wireless.json contains the regulatory domains and channels for the 2.4 and 5 GHz bands. Add a valid ISO Alpha-2 country code to the list of 5Ghz_max48ch countries and save the file. Next, edit includes/config.php and add the same country to this constant: // Constant for the 5GHz wireless regulatory domain define('RASPI_5GHZ_ISO_ALPHA2', array('US')); The Configure hotspot page will now let you select AC as a wireless mode option for your country. If you succeed in creating a stable AP, feel free to share your results in a discussion . Note: it is recommended to monitor logs such as dmesg and the hostapd error log (available in the Logfile output tab of RaspAP) while doing this. Bug reports like \"AC doesn't work\" and/or troubleshooting requests will not be considered. No hard feelings.","title":"I think my country allows 5 GHz AP channels. Can I test this?"},{"location":"faq/#why-is-the-maximum-throughput-of-my-80211n-ap-reduced-by-half","text":"In order to achieve optimal throughput with 802.11n, the wireless stream must operate at a 40 MHz wide channel on the 2.4 GHz band. A 20 MHz channel will restrict you to 72 Mbps. Your hostapd.conf might have the required settings, but this is no guarantee of a 40 MHz channel. In practice, this can be quite difficult due to interference on the 2.4 GHz band. There are many things that will cause an AP to fallback to 20 MHz. The most common reason is if an AP detects another wireless network within 40 MHz, i.e. two channels, of its own channel. For example, if an AP is set to channel 6, another network operating anywhere from channel 4 to 8 will trigger a fallback. hostapd will usually report a fallback like so: 20/40 MHz operation not permitted on channel pri=3 sec=7 based on overlapping BSSes For more information on optimizing 802.11n, refer to this resource . Generally speaking, the 5 GHz band has substantially greater capacity due to more non-overlapping radio channels and less radio interference as compared to the 2.4 GHz band.","title":"Why is the maximum throughput of my 802.11n AP reduced by half?"},{"location":"faq/#how-do-i-upgrade-raspap","text":"Upgrading an existing install without changing your configuration is very straightforward. To upgrade to the latest release version, simply run the Quick Installer with the --upgrade option: curl -sL https://install.raspap.com | bash -s -- --upgrade The installer upgrade is idempotent , meaning it can be repeated an arbitrary number of times and the result will be as if it had been done only once. If you choose this method, you're done! Confirm the upgrade by checking the release version on the About page. If you want to install a specific version you can do so by referencing a tag: sudo git fetch --tags sudo git checkout 2.5 A tag is a pointer that isn't connected to the main development tree that git knows about. As a result, git will reply that you're in a 'detached HEAD' state. This isn't a big deal, it just means that you have a specific version of the code that isn't connected to the git tree. Alternatively, if you want the latest bleeding edge commits from the master branch, use the following: sudo git checkout -b master sudo git pull origin master If you've customized your installation by editing config.php , update the release version in this file: sudo nano /var/www/html/includes/config.php Change the first line to the release version, save the file and exit. Note: RASPI_VERSION is only used on the About page; it does not affect any other functionality. define('RASPI_VERSION', '2.5'); Finally, give the lighttpd service a kick with: sudo systemctl restart lighttpd.service Whichever method you choose (installer upgrade, specific release or latest updates), your RaspAP configuration won't be changed.","title":"How do I upgrade RaspAP?"},{"location":"faq/#do-i-need-the-raspap-service-to-run-at-boot","text":"If you are using your RPi as a client on a WiFi network (also known as managed mode) and hosting an access point simultaneously, the raspapd.service will ensure that your hotspot is active after a reboot. It does this by detecting WiFi client AP mode, adding the uap0 interface and starting up networking services in a specific order. If your RPi is configured with wired ethernet ( eth0 ) or you haven't experienced problems with the AP starting on boot, you can disable the RaspAP daemon like so: sudo systemctl disable raspapd.service","title":"Do I need the RaspAP service to run at boot?"},{"location":"faq/#can-the-quick-installer-accept-the-default-options-without-prompting-me","text":"Yes, the Quick Installer has a non-interactive mode that lets you perform unattended setups. This mode assumes \"yes\" as an answer to all prompts. You can do an unattended install of RaspAP by appending the --yes command-line option, like so: curl -sL https://install.raspap.com | bash -s -- --yes The options -y or --assume-yes are also accepted and have the same result.","title":" Can the Quick Installer accept the default options without prompting me?"},{"location":"faq/#how-do-i-uninstall-raspap","text":"We have provided an uninstall script to remove RaspAP cleanly, and also restore any backups of your configuration that were created before RaspAP was installed. The uninstall script is located in installers/uninstall.sh . To start the uninstaller, simply run the following from the project root folder (default location is /var/www/html ): cd /var/www/html sudo installers/uninstall.sh","title":"How do I uninstall RaspAP?"},{"location":"insiders/","text":"Development of RaspAP is made possible thanks to a sponsorware release model. This means that new features are first exclusively released to sponsors as part of Insiders . Read on to learn how sponsorship works, and how easy it is to get access to Insiders. How sponsorship works New features first land in Insiders , which means that sponsors will have access to them immediately . Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into the public RaspAP repository and released for general availability. Bug fixes, translation updates and minor enhancements are always released simultaneously in both editions. 1 Don't want to sponsor? No problem, RaspAP already has tons of features available, so chances are that most of your requirements are already satisfied. See the list of exclusive features to learn which features are currently only available to sponsors. How to become a sponsor You can become a sponsor using your individual or organization's GitHub account. Just pick any tier from $10/month and complete the checkout. Then, after a few hours, you will be added as a team member to the super-secret private GitHub repository containing the Insiders edition, which has all exclusive features. In addition, you get access to Insiders-only team discussions and content. Important : If you're sponsoring RaspAP through a GitHub organization, please send a short email to sponsors@raspap.com with the name of your organization and the account that should be added as a collaborator. 2 You can cancel your sponsorship anytime. 3 Exclusive features The following features are currently available exclusively to sponsors. A tangible side benefit of sponsorship is that Insiders are able to help steer future development of RaspAP. This is done through Insiders' access to discussions, feature requests, issues and pull requests in the private GitHub repository. Multiple OpenVPN client configs OpenVPN service logging Night mode toggle Restrict network to static clients WireGuard support Traffic shaping (in progress) Look for the list above to grow as we add more exclusive features. Be sure to visit this page from time to time to learn about what's new, or follow @RaspAP on Twitter to stay updated. Funding targets Below is a list of funding targets. When a funding target is reached, the features that are tied to it are merged back into RaspAP and released to the public for general availability. Goals $500 - First Insiders Edition Multiple OpenVPN client configs OpenVPN service logging Night mode toggle Restrict network to static clients WireGuard support Traffic shaping (in progress) Transparency We've chosen OpenCollective as the fiscal host for our GitHub sponsors organization . This means that our budget is completely transparent\u2014 financial contributions, expenses and payouts to project team members are automatically reported. Everyone can see where money comes from and what it's spent on. This committent to full transparency was central in our decision to implement Insiders. Frequently asked questions Upgrading I have an existing RaspAP installation. How do I upgrade to Insiders? Upgrading is easy. Simply invoke the Quick Installer with the --upgrade switch, specifying the private Insiders option, like so: curl -sL https://install.raspap.com | bash -s -- --upgrade --insiders If you haven't added SSH keys to your GitHub account you will be prompted to authenticate. In this case, just enter your GitHub credentials during the install. For example: RaspAP Install: Cloning latest files from github Cloning into '/tmp/raspap-webgui'... Username for 'https://github.com': octocat Password for 'https://octocat@github.com': Note : your password is sent securely via SSH to GitHub. The above prompt is actually from GitHub, so the installer does not know your credentials. Terms We're using RaspAP for a commercial project. Can we use Insiders under the same terms and conditions? Yes. Whether you're an individual or a company, you may use RaspAP Insiders precisely under the same terms as RaspAP, which are defined by the GNU GPL 3.0 license . However, we kindly ask you to respect the following guidelines: Please don't distribute the source code of Insiders. You may freely use it for public, private or commercial projects, fork it, mirror it, do whatever you want with it, but please don't release the source code, as it would counteract the sponsorware strategy. If you cancel your subscription, you're removed as a collaborator and will miss out on future updates of Insiders. However, you may use the latest version that's available to you as long as you like. Just remember that GitHub deletes private forks . You may be wondering if the sponsorware model contradicts the ethos of Open Source software. It's true that some features are locked behind a payment, which means they are only accessible after pledging a small amount of money. However, these features are only exclusive until specific funding targets are reached. Making an Open Source project sustainable is exceptionally difficult. Maintainers invest significant time and energy developing software, testing, responding to issues, writing documentation and so on. Too often, this leads to burnout and abandoned projects. The sponsorware model ensures that if you decide to use RaspAP, you can be sure that the project remains healthy, bugs are fixed quickly and new features are added regularly. \u21a9 It's currently not possible to grant access to each member of an organization, as GitHub only allows for adding users. Thus, after sponsoring, please send an email to sponsors@raspap.com , stating which account should become a collaborator of the Insiders repository. We're working on a solution which will make access to organizations much simpler. \u21a9 If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle, which ends at the 22 nd of the month for monthly sponsorships. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable. \u21a9","title":"Insiders"},{"location":"insiders/#how-sponsorship-works","text":"New features first land in Insiders , which means that sponsors will have access to them immediately . Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into the public RaspAP repository and released for general availability. Bug fixes, translation updates and minor enhancements are always released simultaneously in both editions. 1 Don't want to sponsor? No problem, RaspAP already has tons of features available, so chances are that most of your requirements are already satisfied. See the list of exclusive features to learn which features are currently only available to sponsors.","title":"How sponsorship works"},{"location":"insiders/#how-to-become-a-sponsor","text":"You can become a sponsor using your individual or organization's GitHub account. Just pick any tier from $10/month and complete the checkout. Then, after a few hours, you will be added as a team member to the super-secret private GitHub repository containing the Insiders edition, which has all exclusive features. In addition, you get access to Insiders-only team discussions and content. Important : If you're sponsoring RaspAP through a GitHub organization, please send a short email to sponsors@raspap.com with the name of your organization and the account that should be added as a collaborator. 2 You can cancel your sponsorship anytime. 3","title":"How to become a sponsor"},{"location":"insiders/#exclusive-features","text":"The following features are currently available exclusively to sponsors. A tangible side benefit of sponsorship is that Insiders are able to help steer future development of RaspAP. This is done through Insiders' access to discussions, feature requests, issues and pull requests in the private GitHub repository. Multiple OpenVPN client configs OpenVPN service logging Night mode toggle Restrict network to static clients WireGuard support Traffic shaping (in progress) Look for the list above to grow as we add more exclusive features. Be sure to visit this page from time to time to learn about what's new, or follow @RaspAP on Twitter to stay updated.","title":"Exclusive features"},{"location":"insiders/#funding-targets","text":"Below is a list of funding targets. When a funding target is reached, the features that are tied to it are merged back into RaspAP and released to the public for general availability.","title":"Funding targets"},{"location":"insiders/#goals","text":"","title":"Goals"},{"location":"insiders/#500-first-insiders-edition","text":"Multiple OpenVPN client configs OpenVPN service logging Night mode toggle Restrict network to static clients WireGuard support Traffic shaping (in progress)","title":"$500 - First Insiders Edition"},{"location":"insiders/#transparency","text":"We've chosen OpenCollective as the fiscal host for our GitHub sponsors organization . This means that our budget is completely transparent\u2014 financial contributions, expenses and payouts to project team members are automatically reported. Everyone can see where money comes from and what it's spent on. This committent to full transparency was central in our decision to implement Insiders.","title":"Transparency"},{"location":"insiders/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"insiders/#upgrading","text":"I have an existing RaspAP installation. How do I upgrade to Insiders? Upgrading is easy. Simply invoke the Quick Installer with the --upgrade switch, specifying the private Insiders option, like so: curl -sL https://install.raspap.com | bash -s -- --upgrade --insiders If you haven't added SSH keys to your GitHub account you will be prompted to authenticate. In this case, just enter your GitHub credentials during the install. For example: RaspAP Install: Cloning latest files from github Cloning into '/tmp/raspap-webgui'... Username for 'https://github.com': octocat Password for 'https://octocat@github.com': Note : your password is sent securely via SSH to GitHub. The above prompt is actually from GitHub, so the installer does not know your credentials.","title":"Upgrading"},{"location":"insiders/#terms","text":"We're using RaspAP for a commercial project. Can we use Insiders under the same terms and conditions? Yes. Whether you're an individual or a company, you may use RaspAP Insiders precisely under the same terms as RaspAP, which are defined by the GNU GPL 3.0 license . However, we kindly ask you to respect the following guidelines: Please don't distribute the source code of Insiders. You may freely use it for public, private or commercial projects, fork it, mirror it, do whatever you want with it, but please don't release the source code, as it would counteract the sponsorware strategy. If you cancel your subscription, you're removed as a collaborator and will miss out on future updates of Insiders. However, you may use the latest version that's available to you as long as you like. Just remember that GitHub deletes private forks . You may be wondering if the sponsorware model contradicts the ethos of Open Source software. It's true that some features are locked behind a payment, which means they are only accessible after pledging a small amount of money. However, these features are only exclusive until specific funding targets are reached. Making an Open Source project sustainable is exceptionally difficult. Maintainers invest significant time and energy developing software, testing, responding to issues, writing documentation and so on. Too often, this leads to burnout and abandoned projects. The sponsorware model ensures that if you decide to use RaspAP, you can be sure that the project remains healthy, bugs are fixed quickly and new features are added regularly. \u21a9 It's currently not possible to grant access to each member of an organization, as GitHub only allows for adding users. Thus, after sponsoring, please send an email to sponsors@raspap.com , stating which account should become a collaborator of the Insiders repository. We're working on a solution which will make access to organizations much simpler. \u21a9 If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle, which ends at the 22 nd of the month for monthly sponsorships. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable. \u21a9","title":"Terms"},{"location":"issues/","text":"Reporting issues Overview RaspAP is free software. It is delivered to you, at no cost, and with no guarantee. The community of developers who contribute to this project make every effort to deliver defect-free code. That said, no software is perfect. You can help us improve this project by accurately describing your issue. Issue policy This project is currently led by one developer ( @billz ) in his very limited spare time. Please respect our developers' time by using issues for reporting bugs only. RaspAP is not a boxed product with a free troubleshooting hotline. If your issue is of a general nature and not directly related to a defect with this project, try searching the official Raspberry Pi forums , RaspAP's GitHub discussions , or Raspberry Pi on Stack Exchange . Chances are your question has been discussed and answered before. The project FAQ is continuously updated with answers to many common questions. Refer to this first before creating a new issue. Guidelines You can help us improve this project by accurately describing defects. To that end, these guidelines have been established to streamline the reporting process: The bug report template is there for a reason. Please use it. Provide useful detail to reproduce your issue. \"Doesn't work\" or \"not working\" is not a valid report. Issues created without the template will be labeled as invalid and closed immediately. Log data can be helpful in context, within reasonable limits. If an issue is unclear or needs further information, it will be labeled with question and awaiting-user . Issues that becomes stale due to inactivity are automatically managed by stale-bot. Supported devices RaspAP functions very well \"out of the box\" on fresh installs of the latest RPi OS Lite 32-bit distribution on recent hardware like the RPi 4, 3B+ and Zero W. The version 2.3.1 release extends beta support to additional Debian-based distros, including Armbian and Ubuntu Server. Please note that \"supported\" is not a guarantee . If you have installed other software packages on top of RaspAP, particularly those related to networking such as TOR or Pi-hole, please test RaspAP first on a clean install before reporting an issue. Default settings One of RaspAP's most popular features is the Quick Installer , which gets an AP up and running quickly and with a minimum of hassle. This works by applying a known-good default configuration that has been validated in testing with the project's supported devices. When the project prerequisites are followed, an AP with wired ethernet ( eth0 ) or managed mode ( wlan0 ) Wifi client AP will be functional with the default settings. Important: RaspAP gives you control over many of the settings for hostapd , dhcpcd and dnsmasq . Once these default settings are changed, it's possible that one or all of the above services will enter a failed state. Will RaspAP let me create a configuration that \"breaks\" my hotspot? In a word, yes. While the Quick Installer automates most of the work of creating an AP, RaspAP does not automagically validate your custom configurations. As a result, you may observe anomalous behavior when restarting these services and/or rebooting your RPi. When in doubt, simply run the Quick Installer again to restore the default settings: curl -sL https://install.raspap.com | bash Because of this, issues such as \"hotspot isn't working\" or \"gui doesn't work\" won't be considered. No hard feelings. Submitting an issue If, after searching these community forums, consulting the FAQ and understanding the default settings, your issue still persists, please provide as much detailed information as possible. Use the provided issue template. Incomplete issue reports will not be considered. Thanks.","title":"Reporting issues"},{"location":"issues/#reporting-issues","text":"","title":"Reporting issues"},{"location":"issues/#overview","text":"RaspAP is free software. It is delivered to you, at no cost, and with no guarantee. The community of developers who contribute to this project make every effort to deliver defect-free code. That said, no software is perfect. You can help us improve this project by accurately describing your issue.","title":"Overview"},{"location":"issues/#issue-policy","text":"This project is currently led by one developer ( @billz ) in his very limited spare time. Please respect our developers' time by using issues for reporting bugs only. RaspAP is not a boxed product with a free troubleshooting hotline. If your issue is of a general nature and not directly related to a defect with this project, try searching the official Raspberry Pi forums , RaspAP's GitHub discussions , or Raspberry Pi on Stack Exchange . Chances are your question has been discussed and answered before. The project FAQ is continuously updated with answers to many common questions. Refer to this first before creating a new issue.","title":"Issue policy"},{"location":"issues/#guidelines","text":"You can help us improve this project by accurately describing defects. To that end, these guidelines have been established to streamline the reporting process: The bug report template is there for a reason. Please use it. Provide useful detail to reproduce your issue. \"Doesn't work\" or \"not working\" is not a valid report. Issues created without the template will be labeled as invalid and closed immediately. Log data can be helpful in context, within reasonable limits. If an issue is unclear or needs further information, it will be labeled with question and awaiting-user . Issues that becomes stale due to inactivity are automatically managed by stale-bot.","title":"Guidelines"},{"location":"issues/#supported-devices","text":"RaspAP functions very well \"out of the box\" on fresh installs of the latest RPi OS Lite 32-bit distribution on recent hardware like the RPi 4, 3B+ and Zero W. The version 2.3.1 release extends beta support to additional Debian-based distros, including Armbian and Ubuntu Server. Please note that \"supported\" is not a guarantee . If you have installed other software packages on top of RaspAP, particularly those related to networking such as TOR or Pi-hole, please test RaspAP first on a clean install before reporting an issue.","title":"Supported devices"},{"location":"issues/#default-settings","text":"One of RaspAP's most popular features is the Quick Installer , which gets an AP up and running quickly and with a minimum of hassle. This works by applying a known-good default configuration that has been validated in testing with the project's supported devices. When the project prerequisites are followed, an AP with wired ethernet ( eth0 ) or managed mode ( wlan0 ) Wifi client AP will be functional with the default settings. Important: RaspAP gives you control over many of the settings for hostapd , dhcpcd and dnsmasq . Once these default settings are changed, it's possible that one or all of the above services will enter a failed state.","title":"Default settings"},{"location":"issues/#will-raspap-let-me-create-a-configuration-that-breaks-my-hotspot","text":"In a word, yes. While the Quick Installer automates most of the work of creating an AP, RaspAP does not automagically validate your custom configurations. As a result, you may observe anomalous behavior when restarting these services and/or rebooting your RPi. When in doubt, simply run the Quick Installer again to restore the default settings: curl -sL https://install.raspap.com | bash Because of this, issues such as \"hotspot isn't working\" or \"gui doesn't work\" won't be considered. No hard feelings.","title":"Will RaspAP let me create a configuration that \"breaks\" my hotspot?"},{"location":"issues/#submitting-an-issue","text":"If, after searching these community forums, consulting the FAQ and understanding the default settings, your issue still persists, please provide as much detailed information as possible. Use the provided issue template. Incomplete issue reports will not be considered. Thanks.","title":"Submitting an issue"},{"location":"manual/","text":"Manual installation Overview These steps apply to the latest release of RaspAP , Raspberry Pi OS Lite , Debian and Armbian. Notes for previous versions, Ubuntu Server 18.04 TLS and 19.10 are provided, where applicable. Please refer to this regarding operating systems support. Prerequisites Start off by updating your system's package list, then upgrade the kernel, firmware and installed packages to their latest versions: sudo apt-get update sudo apt-get full-upgrade Note that full-upgrade is used rather than a simple upgrade , as this also picks up any dependency changes that may have been made. The kernel and firmware are installed as a Debian package, and so will also get updates when using the procedure above. These packages are updated infrequently and after extensive testing. Enable wireless operation Telecommunications radio bands are subject to regulatory restrictions to ensure interference-free operation. The Linux OS complies with these rules by requiring users to configure a two-letter \"WiFi country code\". In RPi OS, 5 GHz wireless networking is disabled until this country code has been set, usually as part of the initial installation process. If you have not set your country code or are unsure, check the \"WLAN Country\" setting in raspi-config's Localisation Options : sudo raspi-config To ensure the WiFi radio is not blocked on the Raspberry Pi, execute the following command: sudo rfkill unblock wlan Non-RPi OS dependencies Operating systems other than RPi OS have some additional dependencies. If you are using RPi OS Lite, skip this section. On Ubuntu Server, add a dependency and the ppa:ondrej/php apt package: sudo apt-get install software-properties-common sudo add-apt-repository ppa:ondrej/php On Debian, Armbian and Ubuntu, install dhcpcd5 with the following: sudo apt-get install dhcpcd5 Install packages Install git, lighttpd, php7, hostapd, dnsmasq and some extra packages with the following: sudo apt-get install lighttpd git hostapd dnsmasq iptables-persistent vnstat qrencode php7.3-cgi Note: for Ubuntu, you may replace php7.3-cgi with php7.4-cgi . php5 is no longer supported. Enable PHP Next, enable PHP for lighttpd and restart the service for the settings to take effect: sudo lighttpd-enable-mod fastcgi-php sudo service lighttpd force-reload sudo systemctl restart lighttpd.service Create the web application In these steps we will prepare the web destination and git clone the files to /var/www/html . Caution: If this is not a clean installation, be sure you do not have existing files or directories in the web root before executing the rm -rf command. sudo rm -rf /var/www/html sudo git clone https://github.com/RaspAP/raspap-webgui /var/www/html Copy an extra lighttpd config file to support application routing. Link it into conf-enabled and restart the web service: sudo cp /var/www/html/config/50-raspap-router.conf /etc/lighttpd/conf-available sudo ln -s /etc/lighttpd/conf-available/50-raspap-router.conf /etc/lighttpd/conf-enabled/50-raspap-router.conf sudo systemctl restart lighttpd.service Now comes the fun part. For security reasons, the www-data user which lighttpd runs under is not allowed to start or stop daemons, or run commands like ip link , all of which we want our app to do. So we will add the www-data user to sudoers, but with restrictions on what commands the user can run. Copy the sudoers rules to their destination: cd /var/www/html sudo cp installers/raspap.sudoers /etc/sudoers.d/090_raspap Configuration directories RaspAP uses several directories to manage its own configuration. Create these with the following commands: sudo mkdir /etc/raspap/ sudo mkdir /etc/raspap/backups sudo mkdir /etc/raspap/networking sudo mkdir /etc/raspap/hostapd sudo mkdir /etc/raspap/lighttpd Move RaspAP's auth control file to the configuration directory you created above: sudo cp raspap.php /etc/raspap Set permissions Next, set the files ownership to the www-data user for the web files and RaspAP config: sudo chown -R www-data:www-data /var/www/html sudo chown -R www-data:www-data /etc/raspap Control scripts RaspAP uses several shell scripts to manage various aspects of the application, including hostapd logging and raspapd , the RaspAP control service. Move these scripts to their destinations with the following: sudo mv installers/*log.sh /etc/raspap/hostapd sudo mv installers/service*.sh /etc/raspap/hostapd Set ownership and permissions for the logging and service control scripts: sudo chown -c root:www-data /etc/raspap/hostapd/*.sh sudo chmod 750 /etc/raspap/hostapd/*.sh Copy and set ownership of the lighttpd control scripts: sudo cp installers/configport.sh /etc/raspap/lighttpd sudo chown -c root:www-data /etc/raspap/lighttpd/*.sh Next, move the raspapd service file to the correct location and enable it: sudo mv installers/raspapd.service /lib/systemd/system sudo systemctl daemon-reload sudo systemctl enable raspapd.service Default configuration To facilitate a faster setup, RaspAP uses a \"known-good\" default configuration as a starting point. Copy the configuration files for dhcpcd , dnsmasq , hostapd and defaults.json . Optionally, backup your existing hostapd.conf : sudo mv /etc/default/hostapd ~/default_hostapd.old sudo cp /etc/hostapd/hostapd.conf ~/hostapd.conf.old sudo cp config/default_hostapd /etc/default/hostapd sudo cp config/hostapd.conf /etc/hostapd/hostapd.conf sudo cp config/090_raspap.conf /etc/dnsmasq.d/090_raspap.conf sudo cp config/090_wlan0.conf /etc/dnsmasq.d/090_wlan0.conf sudo cp config/dhcpcd.conf /etc/dhcpcd.conf sudo cp config/config.php /var/www/html/includes/ sudo cp config/defaults.json /etc/raspap/networking/ Note: If you wish to modify RaspAP's default configuration for dnsmasq and dhcp , you may do so by changing these files and editing config/defaults.json . Next, disable systemd-networkd and copy the bridge configuration with the following: sudo systemctl stop systemd-networkd sudo systemctl disable systemd-networkd sudo cp config/raspap-bridge-br0.netdev /etc/systemd/network/raspap-bridge-br0.netdev sudo cp config/raspap-br0-member-eth0.network /etc/systemd/network/raspap-br0-member-eth0.network Optimize PHP Optionally, you may optimize PHP with the following, replacing php7.3-cgi with your installed version: sudo sed -i -E 's/^session\\.cookie_httponly\\s*=\\s*(0|([O|o]ff)|([F|f]alse)|([N|n]o))\\s*$/session.cookie_httponly = 1/' /etc/php/7.3/cgi/php.ini sudo sed -i -E 's/^;?opcache\\.enable\\s*=\\s*(0|([O|o]ff)|([F|f]alse)|([N|n]o))\\s*$/opcache.enable = 1/' /etc/php/7.3/cgi/php.ini sudo phpenmod opcache Routing and IP masquerading These steps allow WLAN clients to access computers on the main wired eth0 network, and from there the internet. Begin by enabling IP forwarding with the following commands: echo \"net.ipv4.ip_forward=1\" | sudo tee /etc/sysctl.d/90_raspap.conf > /dev/null sudo sysctl -p /etc/sysctl.d/90_raspap.conf sudo /etc/init.d/procps restart To enable traffic between clients on the WLAN and the internet, we add two iptables network address translation (NAT) \"masquerade\" firewall rules. Create these rules and persist them with the following: sudo iptables -t nat -A POSTROUTING -j MASQUERADE sudo iptables -t nat -A POSTROUTING -s 192.168.50.0/24 ! -d 192.168.50.0/24 -j MASQUERADE sudo iptables-save | sudo tee /etc/iptables/rules.v4 Enable hostapd The hostapd service is disabled by default, as there is no configuration for it after its initial installation. Unmask and enable it with the following: sudo systemctl unmask hostapd.service sudo systemctl enable hostapd.service OpenVPN Optionally, you may install OpenVPN, enabling the option in RaspAP's config and the openvpn-client service: sudo apt-get install openvpn sudo sed -i \"s/\\('RASPI_OPENVPN_ENABLED', \\)false/\\1true/g\" /var/www/html/includes/config.php sudo systemctl enable openvpn-client@client Copy the OpenVPN auth control script to its destination, setting ownership and permissions with the following: sudo mkdir /etc/raspap/openvpn/ sudo cp installers/configauth.sh /etc/raspap/openvpn/ sudo chown -c root:www-data /etc/raspap/openvpn/*.sh sudo chmod 750 /etc/raspap/openvpn/*.sh Ad blocking Optionally, you may install Ad blocking, enabling the option in RaspAP's config. There are several steps involved here, including downloading the blocklists: sudo mkdir /etc/raspap/adblock wget https://raw.githubusercontent.com/notracking/hosts-blocklists/master/hostnames.txt -O /tmp/hostnames.txt wget https://raw.githubusercontent.com/notracking/hosts-blocklists/master/domains.txt -O /tmp/domains.txt sudo cp /tmp/hostnames.txt /etc/raspap/adblock sudo cp /tmp/domains.txt /etc/raspap/adblock sudo cp installers/update_blocklist.sh /etc/raspap/adblock/ sudo chown -c root:www-data /etc/raspap/adblock/*.* sudo chmod 750 /etc/raspap/adblock/*.sh sudo touch /etc/dnsmasq.d/090_adblock.conf echo \"conf-file=/etc/raspap/adblock/domains.txt\" | sudo tee -a /etc/dnsmasq.d/090_adblock.conf > /dev/null echo \"addn-hosts=/etc/raspap/adblock/hostnames.txt\" | sudo tee -a /etc/dnsmasq.d/090_adblock.conf > /dev/null sudo sed -i '/dhcp-option=6/d' /etc/dnsmasq.d/090_raspap.conf sudo sed -i \"s/\\('RASPI_ADBLOCK_ENABLED', \\)false/\\1true/g\" includes/config.php Restart Finally, restart your device and verify that the wireless access point is available: sudo systemctl reboot After your device has restarted, search for wireless networks with your wireless client. The default SSID is raspi-webgui . The default username is \"admin\" and the default password is \"secret\". Note: It is strongly recommended that you change these default login credentials in RaspAP's Authentication panel. APs managed by RaspAP in the wild have been administered by third parties with the default login. If you have any difficulties with the manual install steps, start a discussion and refer to this page.","title":"Manual installation"},{"location":"manual/#manual-installation","text":"","title":"Manual installation"},{"location":"manual/#overview","text":"These steps apply to the latest release of RaspAP , Raspberry Pi OS Lite , Debian and Armbian. Notes for previous versions, Ubuntu Server 18.04 TLS and 19.10 are provided, where applicable. Please refer to this regarding operating systems support.","title":"Overview"},{"location":"manual/#prerequisites","text":"Start off by updating your system's package list, then upgrade the kernel, firmware and installed packages to their latest versions: sudo apt-get update sudo apt-get full-upgrade Note that full-upgrade is used rather than a simple upgrade , as this also picks up any dependency changes that may have been made. The kernel and firmware are installed as a Debian package, and so will also get updates when using the procedure above. These packages are updated infrequently and after extensive testing.","title":"Prerequisites"},{"location":"manual/#enable-wireless-operation","text":"Telecommunications radio bands are subject to regulatory restrictions to ensure interference-free operation. The Linux OS complies with these rules by requiring users to configure a two-letter \"WiFi country code\". In RPi OS, 5 GHz wireless networking is disabled until this country code has been set, usually as part of the initial installation process. If you have not set your country code or are unsure, check the \"WLAN Country\" setting in raspi-config's Localisation Options : sudo raspi-config To ensure the WiFi radio is not blocked on the Raspberry Pi, execute the following command: sudo rfkill unblock wlan","title":"Enable wireless operation"},{"location":"manual/#non-rpi-os-dependencies","text":"Operating systems other than RPi OS have some additional dependencies. If you are using RPi OS Lite, skip this section. On Ubuntu Server, add a dependency and the ppa:ondrej/php apt package: sudo apt-get install software-properties-common sudo add-apt-repository ppa:ondrej/php On Debian, Armbian and Ubuntu, install dhcpcd5 with the following: sudo apt-get install dhcpcd5","title":"Non-RPi OS dependencies"},{"location":"manual/#install-packages","text":"Install git, lighttpd, php7, hostapd, dnsmasq and some extra packages with the following: sudo apt-get install lighttpd git hostapd dnsmasq iptables-persistent vnstat qrencode php7.3-cgi Note: for Ubuntu, you may replace php7.3-cgi with php7.4-cgi . php5 is no longer supported.","title":"Install packages"},{"location":"manual/#enable-php","text":"Next, enable PHP for lighttpd and restart the service for the settings to take effect: sudo lighttpd-enable-mod fastcgi-php sudo service lighttpd force-reload sudo systemctl restart lighttpd.service","title":"Enable PHP"},{"location":"manual/#create-the-web-application","text":"In these steps we will prepare the web destination and git clone the files to /var/www/html . Caution: If this is not a clean installation, be sure you do not have existing files or directories in the web root before executing the rm -rf command. sudo rm -rf /var/www/html sudo git clone https://github.com/RaspAP/raspap-webgui /var/www/html Copy an extra lighttpd config file to support application routing. Link it into conf-enabled and restart the web service: sudo cp /var/www/html/config/50-raspap-router.conf /etc/lighttpd/conf-available sudo ln -s /etc/lighttpd/conf-available/50-raspap-router.conf /etc/lighttpd/conf-enabled/50-raspap-router.conf sudo systemctl restart lighttpd.service Now comes the fun part. For security reasons, the www-data user which lighttpd runs under is not allowed to start or stop daemons, or run commands like ip link , all of which we want our app to do. So we will add the www-data user to sudoers, but with restrictions on what commands the user can run. Copy the sudoers rules to their destination: cd /var/www/html sudo cp installers/raspap.sudoers /etc/sudoers.d/090_raspap","title":"Create the web application"},{"location":"manual/#configuration-directories","text":"RaspAP uses several directories to manage its own configuration. Create these with the following commands: sudo mkdir /etc/raspap/ sudo mkdir /etc/raspap/backups sudo mkdir /etc/raspap/networking sudo mkdir /etc/raspap/hostapd sudo mkdir /etc/raspap/lighttpd Move RaspAP's auth control file to the configuration directory you created above: sudo cp raspap.php /etc/raspap","title":"Configuration directories"},{"location":"manual/#set-permissions","text":"Next, set the files ownership to the www-data user for the web files and RaspAP config: sudo chown -R www-data:www-data /var/www/html sudo chown -R www-data:www-data /etc/raspap","title":"Set permissions"},{"location":"manual/#control-scripts","text":"RaspAP uses several shell scripts to manage various aspects of the application, including hostapd logging and raspapd , the RaspAP control service. Move these scripts to their destinations with the following: sudo mv installers/*log.sh /etc/raspap/hostapd sudo mv installers/service*.sh /etc/raspap/hostapd Set ownership and permissions for the logging and service control scripts: sudo chown -c root:www-data /etc/raspap/hostapd/*.sh sudo chmod 750 /etc/raspap/hostapd/*.sh Copy and set ownership of the lighttpd control scripts: sudo cp installers/configport.sh /etc/raspap/lighttpd sudo chown -c root:www-data /etc/raspap/lighttpd/*.sh Next, move the raspapd service file to the correct location and enable it: sudo mv installers/raspapd.service /lib/systemd/system sudo systemctl daemon-reload sudo systemctl enable raspapd.service","title":"Control scripts"},{"location":"manual/#default-configuration","text":"To facilitate a faster setup, RaspAP uses a \"known-good\" default configuration as a starting point. Copy the configuration files for dhcpcd , dnsmasq , hostapd and defaults.json . Optionally, backup your existing hostapd.conf : sudo mv /etc/default/hostapd ~/default_hostapd.old sudo cp /etc/hostapd/hostapd.conf ~/hostapd.conf.old sudo cp config/default_hostapd /etc/default/hostapd sudo cp config/hostapd.conf /etc/hostapd/hostapd.conf sudo cp config/090_raspap.conf /etc/dnsmasq.d/090_raspap.conf sudo cp config/090_wlan0.conf /etc/dnsmasq.d/090_wlan0.conf sudo cp config/dhcpcd.conf /etc/dhcpcd.conf sudo cp config/config.php /var/www/html/includes/ sudo cp config/defaults.json /etc/raspap/networking/ Note: If you wish to modify RaspAP's default configuration for dnsmasq and dhcp , you may do so by changing these files and editing config/defaults.json . Next, disable systemd-networkd and copy the bridge configuration with the following: sudo systemctl stop systemd-networkd sudo systemctl disable systemd-networkd sudo cp config/raspap-bridge-br0.netdev /etc/systemd/network/raspap-bridge-br0.netdev sudo cp config/raspap-br0-member-eth0.network /etc/systemd/network/raspap-br0-member-eth0.network","title":"Default configuration"},{"location":"manual/#optimize-php","text":"Optionally, you may optimize PHP with the following, replacing php7.3-cgi with your installed version: sudo sed -i -E 's/^session\\.cookie_httponly\\s*=\\s*(0|([O|o]ff)|([F|f]alse)|([N|n]o))\\s*$/session.cookie_httponly = 1/' /etc/php/7.3/cgi/php.ini sudo sed -i -E 's/^;?opcache\\.enable\\s*=\\s*(0|([O|o]ff)|([F|f]alse)|([N|n]o))\\s*$/opcache.enable = 1/' /etc/php/7.3/cgi/php.ini sudo phpenmod opcache","title":"Optimize PHP"},{"location":"manual/#routing-and-ip-masquerading","text":"These steps allow WLAN clients to access computers on the main wired eth0 network, and from there the internet. Begin by enabling IP forwarding with the following commands: echo \"net.ipv4.ip_forward=1\" | sudo tee /etc/sysctl.d/90_raspap.conf > /dev/null sudo sysctl -p /etc/sysctl.d/90_raspap.conf sudo /etc/init.d/procps restart To enable traffic between clients on the WLAN and the internet, we add two iptables network address translation (NAT) \"masquerade\" firewall rules. Create these rules and persist them with the following: sudo iptables -t nat -A POSTROUTING -j MASQUERADE sudo iptables -t nat -A POSTROUTING -s 192.168.50.0/24 ! -d 192.168.50.0/24 -j MASQUERADE sudo iptables-save | sudo tee /etc/iptables/rules.v4","title":"Routing and IP masquerading"},{"location":"manual/#enable-hostapd","text":"The hostapd service is disabled by default, as there is no configuration for it after its initial installation. Unmask and enable it with the following: sudo systemctl unmask hostapd.service sudo systemctl enable hostapd.service","title":"Enable hostapd"},{"location":"manual/#openvpn","text":"Optionally, you may install OpenVPN, enabling the option in RaspAP's config and the openvpn-client service: sudo apt-get install openvpn sudo sed -i \"s/\\('RASPI_OPENVPN_ENABLED', \\)false/\\1true/g\" /var/www/html/includes/config.php sudo systemctl enable openvpn-client@client Copy the OpenVPN auth control script to its destination, setting ownership and permissions with the following: sudo mkdir /etc/raspap/openvpn/ sudo cp installers/configauth.sh /etc/raspap/openvpn/ sudo chown -c root:www-data /etc/raspap/openvpn/*.sh sudo chmod 750 /etc/raspap/openvpn/*.sh","title":"OpenVPN"},{"location":"manual/#ad-blocking","text":"Optionally, you may install Ad blocking, enabling the option in RaspAP's config. There are several steps involved here, including downloading the blocklists: sudo mkdir /etc/raspap/adblock wget https://raw.githubusercontent.com/notracking/hosts-blocklists/master/hostnames.txt -O /tmp/hostnames.txt wget https://raw.githubusercontent.com/notracking/hosts-blocklists/master/domains.txt -O /tmp/domains.txt sudo cp /tmp/hostnames.txt /etc/raspap/adblock sudo cp /tmp/domains.txt /etc/raspap/adblock sudo cp installers/update_blocklist.sh /etc/raspap/adblock/ sudo chown -c root:www-data /etc/raspap/adblock/*.* sudo chmod 750 /etc/raspap/adblock/*.sh sudo touch /etc/dnsmasq.d/090_adblock.conf echo \"conf-file=/etc/raspap/adblock/domains.txt\" | sudo tee -a /etc/dnsmasq.d/090_adblock.conf > /dev/null echo \"addn-hosts=/etc/raspap/adblock/hostnames.txt\" | sudo tee -a /etc/dnsmasq.d/090_adblock.conf > /dev/null sudo sed -i '/dhcp-option=6/d' /etc/dnsmasq.d/090_raspap.conf sudo sed -i \"s/\\('RASPI_ADBLOCK_ENABLED', \\)false/\\1true/g\" includes/config.php","title":"Ad blocking"},{"location":"manual/#restart","text":"Finally, restart your device and verify that the wireless access point is available: sudo systemctl reboot After your device has restarted, search for wireless networks with your wireless client. The default SSID is raspi-webgui . The default username is \"admin\" and the default password is \"secret\". Note: It is strongly recommended that you change these default login credentials in RaspAP's Authentication panel. APs managed by RaspAP in the wild have been administered by third parties with the default login. If you have any difficulties with the manual install steps, start a discussion and refer to this page.","title":"Restart"},{"location":"mini-pitft/","text":"Mini PiTFT stats display Overview The Adafruit Mini PiTFT is an affordable 135x240 color TFT display for the Raspberry Pi. The PiTFT connects to the 'top' 2x12 headers on the Pi's 2x20 GPIO header connection. It comes pre-assembled and tested so it can simply be attached to the Pi's header pins (no soldering required). Its low cost, form factor and bright display make it well suited as an add-on for RaspAP. Using the display is straightforward with Adafruit's CircuitPython library for the ST7789 chipset . For this application we will use the Python imaging library (PIL) to output some useful stats for RaspAP. The Mini PiTFT's small size complements the Pi Zero W, although for this example we're using a Pi Model 4. Setup With the Mini PiTFT attached to your Pi's GPIO pins, follow Adafruit's setup guide for Python . You will need to verify that Serial Peripheral Interface (SPI) is enabled on your Pi and that you are running Python 3. Check that SPI is enabled on your Pi with grep \"^dt.*\" /boot/config.txt : dtparam=spi=on ... If you don't see the above, edit this file with sudo nano /boot/config.txt , add this line, save the file and reboot your Pi. Note: Some users have followed Adafruit's setup guide and installed the kernel module, which is useful if you want to draw to the framebuffer and output a mini console . However, the TFT kernel driver can't be run alongside the Python install. So you should choose one method, not both. Install RaspAP using the Quick Installer : curl -sL https://install.raspap.com | bash Alternatively, you can follow the manual setup instructions. With the preliminary setup done, execute RaspAP's stats.py with: sudo python3 stats.py . Your Mini PiTFT should output a summary of RaspAP's status, like so: This program updates the display every 100 milliseconds until exited. Interrupt its execution with CTRL+C. Running on boot It's easy to run this each time your Pi starts up. There are a few ways to do this, but the simplest method is to edit /etc/rc.local . Assuming a typical install of RaspAP, the stats.py path is /var/www/html/app/pitft/stats.py . In the example below, we've copied this to Pi user's home directory with cp stats.py /home/pi . You may then edit rc.local with sudo nano /etc/rc.local and add the line below before exit 0 : sudo /usr/bin/python3 /home/pi/stats.py & exit 0 Save and exit, then reboot your Pi to confirm that the stats display runs on boot.","title":"Mini PiTFT stats display"},{"location":"mini-pitft/#mini-pitft-stats-display","text":"","title":"Mini PiTFT stats display"},{"location":"mini-pitft/#overview","text":"The Adafruit Mini PiTFT is an affordable 135x240 color TFT display for the Raspberry Pi. The PiTFT connects to the 'top' 2x12 headers on the Pi's 2x20 GPIO header connection. It comes pre-assembled and tested so it can simply be attached to the Pi's header pins (no soldering required). Its low cost, form factor and bright display make it well suited as an add-on for RaspAP. Using the display is straightforward with Adafruit's CircuitPython library for the ST7789 chipset . For this application we will use the Python imaging library (PIL) to output some useful stats for RaspAP. The Mini PiTFT's small size complements the Pi Zero W, although for this example we're using a Pi Model 4.","title":"Overview"},{"location":"mini-pitft/#setup","text":"With the Mini PiTFT attached to your Pi's GPIO pins, follow Adafruit's setup guide for Python . You will need to verify that Serial Peripheral Interface (SPI) is enabled on your Pi and that you are running Python 3. Check that SPI is enabled on your Pi with grep \"^dt.*\" /boot/config.txt : dtparam=spi=on ... If you don't see the above, edit this file with sudo nano /boot/config.txt , add this line, save the file and reboot your Pi. Note: Some users have followed Adafruit's setup guide and installed the kernel module, which is useful if you want to draw to the framebuffer and output a mini console . However, the TFT kernel driver can't be run alongside the Python install. So you should choose one method, not both. Install RaspAP using the Quick Installer : curl -sL https://install.raspap.com | bash Alternatively, you can follow the manual setup instructions. With the preliminary setup done, execute RaspAP's stats.py with: sudo python3 stats.py . Your Mini PiTFT should output a summary of RaspAP's status, like so: This program updates the display every 100 milliseconds until exited. Interrupt its execution with CTRL+C.","title":"Setup"},{"location":"mini-pitft/#running-on-boot","text":"It's easy to run this each time your Pi starts up. There are a few ways to do this, but the simplest method is to edit /etc/rc.local . Assuming a typical install of RaspAP, the stats.py path is /var/www/html/app/pitft/stats.py . In the example below, we've copied this to Pi user's home directory with cp stats.py /home/pi . You may then edit rc.local with sudo nano /etc/rc.local and add the line below before exit 0 : sudo /usr/bin/python3 /home/pi/stats.py & exit 0 Save and exit, then reboot your Pi to confirm that the stats display runs on boot.","title":"Running on boot"},{"location":"openvpn/","text":"OpenVPN Overview OpenVPN may be optionally installed by the Quick Installer . Once this is done, you can create a client configuration and manage the openvpn-client service with RaspAP. Enabling OpenVPN To configure an OpenVPN client, upload a valid .ovpn file from your provider and, optionally, specify your login credentials. For clarity, these steps are described below: Enter your credentials, if needed, into the Username and Password fields. Browse to your provider's .ovpn file and choose Save settings . Confirm that the OpenVPN client.conf uploaded successfully. Choose Start OpenVPN . The video walkthrough below illustrates the steps of configuring an OpenVPN client from start to finish. Your browser does not support the video tag. Tunneling traffic RaspAP will store your client configuration and add firewall rules to forward traffic from OpenVPN\u2019s tun0 interface to your configured wireless interface. In the example below, the default AP interface wlan0 is used: iptables -A POSTROUTING -o tun0 -j MASQUERADE iptables -A FORWARD -i tun0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT iptables -A FORWARD -i wlan0 -o tun0 -j ACCEPT Public IP address After a page reload, your new public IPv4 address will be indicated. Click or tap the icon to open a new window with details about your public IP. Multiple client configs Experimental \u00b7 Insiders only Insiders are able to manage multiple OpenVPN configurations. This includes the ability to upload, activate and delete any number of valid .ovpn files and associated login credentials. Thereafter, switching between them is done by simply activating the desired profile. Activating a profile will restart the openvpn-client service automatically. Additionally, openvpn-service activity may be tracked in the Logging tab. Mitigating DNS leaks Remote hosts use a variety of methods to defeat VPNs, some more aggressively than others. Many VPN providers will advise you to configure custom DNS servers to mitigate DNS leaks, which you can do from RaspAP's DHCP > Advanced tab. You can also test for this with https://dnsleaktest.com/ . Other providers have specific VPN nodes to use with popular streaming services. It's recommended to check with your provider and follow their suggestions. When an OpenVPN client is configured, RaspAP adds NAT rules with iptables to forward all packets from the AP interface to tun0 . If you suspect network traffic is not being routed through tun0 (or any other interface) for some reason, you can monitor this directly from your RPi with iftop : sudo apt install iftop sudo iftop -i [interface] Browser considerations The Mozilla Foundation recently added a DNS over HTTPS (DoH) proprietary service to its Firefox browser. As of this writing, this \"feature\" is enabled by default for users in the United States. A consequence of DoH is that DNS requests will be resolved by Mozilla's DNS servers, instead of your VPN provider's. Instructions for disabling this DoH may be found here .","title":"OpenVPN"},{"location":"openvpn/#openvpn","text":"","title":"OpenVPN"},{"location":"openvpn/#overview","text":"OpenVPN may be optionally installed by the Quick Installer . Once this is done, you can create a client configuration and manage the openvpn-client service with RaspAP.","title":"Overview"},{"location":"openvpn/#enabling-openvpn","text":"To configure an OpenVPN client, upload a valid .ovpn file from your provider and, optionally, specify your login credentials. For clarity, these steps are described below: Enter your credentials, if needed, into the Username and Password fields. Browse to your provider's .ovpn file and choose Save settings . Confirm that the OpenVPN client.conf uploaded successfully. Choose Start OpenVPN . The video walkthrough below illustrates the steps of configuring an OpenVPN client from start to finish. Your browser does not support the video tag.","title":"Enabling OpenVPN"},{"location":"openvpn/#tunneling-traffic","text":"RaspAP will store your client configuration and add firewall rules to forward traffic from OpenVPN\u2019s tun0 interface to your configured wireless interface. In the example below, the default AP interface wlan0 is used: iptables -A POSTROUTING -o tun0 -j MASQUERADE iptables -A FORWARD -i tun0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT iptables -A FORWARD -i wlan0 -o tun0 -j ACCEPT","title":"Tunneling traffic"},{"location":"openvpn/#public-ip-address","text":"After a page reload, your new public IPv4 address will be indicated. Click or tap the icon to open a new window with details about your public IP.","title":"Public IP address"},{"location":"openvpn/#multiple-client-configs","text":"Experimental \u00b7 Insiders only Insiders are able to manage multiple OpenVPN configurations. This includes the ability to upload, activate and delete any number of valid .ovpn files and associated login credentials. Thereafter, switching between them is done by simply activating the desired profile. Activating a profile will restart the openvpn-client service automatically. Additionally, openvpn-service activity may be tracked in the Logging tab.","title":"Multiple client configs"},{"location":"openvpn/#mitigating-dns-leaks","text":"Remote hosts use a variety of methods to defeat VPNs, some more aggressively than others. Many VPN providers will advise you to configure custom DNS servers to mitigate DNS leaks, which you can do from RaspAP's DHCP > Advanced tab. You can also test for this with https://dnsleaktest.com/ . Other providers have specific VPN nodes to use with popular streaming services. It's recommended to check with your provider and follow their suggestions. When an OpenVPN client is configured, RaspAP adds NAT rules with iptables to forward all packets from the AP interface to tun0 . If you suspect network traffic is not being routed through tun0 (or any other interface) for some reason, you can monitor this directly from your RPi with iftop : sudo apt install iftop sudo iftop -i [interface]","title":"Mitigating DNS leaks"},{"location":"openvpn/#browser-considerations","text":"The Mozilla Foundation recently added a DNS over HTTPS (DoH) proprietary service to its Firefox browser. As of this writing, this \"feature\" is enabled by default for users in the United States. A consequence of DoH is that DNS requests will be resolved by Mozilla's DNS servers, instead of your VPN provider's. Instructions for disabling this DoH may be found here .","title":"Browser considerations"},{"location":"quick/","text":"Quick installer Overview The installer has been designed to assist users with creating an instance of RaspAP both quickly and with a great deal of flexibility. The install loader will respond to several command line arguments, or switches, enabling various features, upgrades or even installing from a forked version of RaspAP in another GitHub repository. Usage The Quick installer has several options for configuring a RaspAP installation. You can get usage notes from your command shell by requesting the installer like so: curl -sL https://install.raspap.com | bash -s -- --help Appending -s -- [OPTION] to the Quick Install directive will activate one or more options. These are described below. Examples The installer may be invoked locally or remotely via curl . Examples with both cases and various options are given below. Invoke installer remotely, run non-interactively with option flags: curl -sL https://install.raspap.com | bash -s -- --yes --openvpn 1 --adblock 0 Invoke remotely, uprgrade an existing install to the Insiders Edition : curl -sL https://install.raspap.com | bash -s -- --upgrade --insiders Run locally specifying GitHub repo and branch: raspbian.sh --repo foo/bar --branch my/branch Run locally requesting release info: raspbian.sh --version Switches -y, --yes, --assume-yes This option enables unattended installations, such that the installer assumes \"yes\" as an answer to all user prompts. This behavior is identical to how the same option with the apt-get package handler works. -o, --openvpn <flag> Used with the -y , --yes option above, this sets the OpenVPN install option ( 0 = don't install OpenVPN). Given that OpenVPN support is an optional extra, this enables an unattended setup without installing it. -a, --adblock <flag> Used with the -y , --yes option above, this sets the Ad Blocking install option ( 0 = don't install Adblock). Given that Adblock support is an optional extra, this enables an unattended setup without installing it. -c, --cert, --certificate This option installs an SSL certificate with mkcert and configures lighttpd for HTTPS support. It does not (re)install RaspAP. Details are provided here . -r, --repo, --repository <name> If you have forked this project to your own GitHub repo, this option lets you override the default GitHub repo ( RaspAP/raspap-webgui ) used to install RaspAP. An alternate repository name is a required parameter. -b, --branch <name> Similarly, this option overrides the default git branch ( master ). This is useful if you have created a feature branch ( my-feature ) and wish to perform an installation using the Quick Installer. An alternate branch name is a required parameter. An example combining the repo and branch options is given below: curl -sL https://install.raspap.com | bash -s -- --repo foo/bar --branch my-feature -t, --token <accesstoken> Specify a GitHub token to access a private repository. -u, --upgrade Upgrades an existing installation to the latest release version. -i, --insiders Installs from the Insiders Edition ( RaspAP/raspap-insiders ) -v, --version Queries the Github API, outputs the latest RaspAP release version and exits. -h, --help Outputs these usage notes and exits.","title":"Quick installer"},{"location":"quick/#quick-installer","text":"","title":"Quick installer"},{"location":"quick/#overview","text":"The installer has been designed to assist users with creating an instance of RaspAP both quickly and with a great deal of flexibility. The install loader will respond to several command line arguments, or switches, enabling various features, upgrades or even installing from a forked version of RaspAP in another GitHub repository.","title":"Overview"},{"location":"quick/#usage","text":"The Quick installer has several options for configuring a RaspAP installation. You can get usage notes from your command shell by requesting the installer like so: curl -sL https://install.raspap.com | bash -s -- --help Appending -s -- [OPTION] to the Quick Install directive will activate one or more options. These are described below.","title":"Usage"},{"location":"quick/#examples","text":"The installer may be invoked locally or remotely via curl . Examples with both cases and various options are given below. Invoke installer remotely, run non-interactively with option flags: curl -sL https://install.raspap.com | bash -s -- --yes --openvpn 1 --adblock 0 Invoke remotely, uprgrade an existing install to the Insiders Edition : curl -sL https://install.raspap.com | bash -s -- --upgrade --insiders Run locally specifying GitHub repo and branch: raspbian.sh --repo foo/bar --branch my/branch Run locally requesting release info: raspbian.sh --version","title":"Examples"},{"location":"quick/#switches","text":"","title":"Switches"},{"location":"quick/#-y-yes-assume-yes","text":"This option enables unattended installations, such that the installer assumes \"yes\" as an answer to all user prompts. This behavior is identical to how the same option with the apt-get package handler works.","title":"-y, --yes, --assume-yes"},{"location":"quick/#-o-openvpn-flag","text":"Used with the -y , --yes option above, this sets the OpenVPN install option ( 0 = don't install OpenVPN). Given that OpenVPN support is an optional extra, this enables an unattended setup without installing it.","title":"-o, --openvpn &lt;flag&gt;"},{"location":"quick/#-a-adblock-flag","text":"Used with the -y , --yes option above, this sets the Ad Blocking install option ( 0 = don't install Adblock). Given that Adblock support is an optional extra, this enables an unattended setup without installing it.","title":"-a, --adblock &lt;flag&gt;"},{"location":"quick/#-c-cert-certificate","text":"This option installs an SSL certificate with mkcert and configures lighttpd for HTTPS support. It does not (re)install RaspAP. Details are provided here .","title":"-c, --cert, --certificate"},{"location":"quick/#-r-repo-repository-name","text":"If you have forked this project to your own GitHub repo, this option lets you override the default GitHub repo ( RaspAP/raspap-webgui ) used to install RaspAP. An alternate repository name is a required parameter.","title":"-r, --repo, --repository &lt;name&gt;"},{"location":"quick/#-b-branch-name","text":"Similarly, this option overrides the default git branch ( master ). This is useful if you have created a feature branch ( my-feature ) and wish to perform an installation using the Quick Installer. An alternate branch name is a required parameter. An example combining the repo and branch options is given below: curl -sL https://install.raspap.com | bash -s -- --repo foo/bar --branch my-feature","title":"-b, --branch &lt;name&gt;"},{"location":"quick/#-t-token-accesstoken","text":"Specify a GitHub token to access a private repository.","title":"-t, --token &lt;accesstoken&gt;"},{"location":"quick/#-u-upgrade","text":"Upgrades an existing installation to the latest release version.","title":"-u, --upgrade"},{"location":"quick/#-i-insiders","text":"Installs from the Insiders Edition ( RaspAP/raspap-insiders )","title":"-i, --insiders"},{"location":"quick/#-v-version","text":"Queries the Github API, outputs the latest RaspAP release version and exits.","title":"-v, --version"},{"location":"quick/#-h-help","text":"Outputs these usage notes and exits.","title":"-h, --help"},{"location":"ssl-manual/","text":"SSL certificates (manual) Update: this process is now automated by the Quick Installer . Overview HTTPS prevents network attackers from observing or injecting page contents. Clearly, this is a good thing for RaspAP \u2014 given its function for creating and managing wireless networks. But HTTPS needs TLS certificates, and while deploying public websites is largely a solved issue thanks to the ACME protocol and Let's Encrypt , local web servers still mostly use HTTP because no one can get a universally valid certificate for localhost. Locally trusted certificates Managing your own Certificate Authority (CA) is the best solution, but this usually requires an involved manual setup routine. An excellent solution for local websites is mkcert . This is a zero-config tool for making locally-trusted certificates with any name you like. mkcert automatically creates and installs a local CA in the system root store and generates locally-trusted certificates. It also works perfectly well with RaspAP. This allows you to generate a trusted certificate for a hostname (eg., raspap.local) or IP address because it only works for you. Here's the twist: it doesn't generate self-signed certificates, but certificates signed by your own private CA. This tool does not automatically configure servers or mobile clients to use the certificates, though \u2014 that's up to you (see the steps below). Read more about mkcert here and follow the project on GitHub . How-To Follow the steps below to generate and install a locally-trusted certificate for RaspAP. The local domain raspap.local is used in the examples below. You may substitute this with the default raspberrypi.local or your own hostname. Start by installing the pre-built binary for Arch Linux ARM on your Raspberry Pi: sudo wget https://github.com/FiloSottile/mkcert/releases/download/v1.3.0/mkcert-v1.3.0-linux-arm -O /usr/local/bin/mkcert sudo chmod +x /usr/local/bin/mkcert mkcert -install You should see output like the following: Using the local CA at \"/home/pi/.local/share/mkcert\" \u2728 The local CA is now installed in the system trust store! \u26a1\ufe0f Generate a certificate for raspap.local : cd /home/pi mkcert raspap.local \"*.raspap.local\" raspap.local ... and look for output like this: Using the local CA at \"/home/pi/.local/share/mkcert\" \u2728 Created a new certificate valid for the following names \ud83d\udcdc - \"raspap.local\" - \"*.raspap.local\" - \"raspap.local\" Reminder: X.509 wildcards only go one level deep, so this won't match a.b.raspap.local \u2139\ufe0f The certificate is at \"./raspap.local+2.pem\" and the key at \"./raspap.local+2-key.pem\" \u2705 Next, combine the private key and certificate: cat raspap.local+2-key.pem raspap.local+2.pem > raspap.local.pem Create a directory for the combined .pem file in lighttpd: sudo mkdir /etc/lighttpd/ssl Set permissions and move the .pem file: chmod 400 /home/pi/raspap.local.pem sudo mv /home/pi/raspap.local.pem /etc/lighttpd/ssl Edit the lighttpd configuration: sudo nano /etc/lighttpd/lighttpd.conf ... and add the following block to enable SSL with your new certificate: server.modules += (\"mod_openssl\") $SERVER[\"socket\"] == \":443\" { ssl.engine = \"enable\" ssl.pemfile = \"/etc/lighttpd/ssl/raspap.local.pem\" ssl.ca-file = \"/home/pi/.local/share/mkcert/rootCA.pem\" server.name = \"raspap.local\" server.document-root = \"/var/www/html\" } Optionally, you can redirect all HTTP requests to HTTPS like so: $SERVER[\"socket\"] == \":80\" { $HTTP[\"host\"] =~ \"(.*)\" { url.redirect = ( \"^/(.*)\" => \"https://%1/$1\" ) } } Restart the lighttpd service: sudo systemctl restart lighttpd Verify that lighttpd has restarted without errors: sudo systemctl status lighttpd You should see a response like the following: \u25cf lighttpd.service - Lighttpd Daemon Loaded: loaded (/lib/systemd/system/lighttpd.service; enabled) Active: active (running) since Mon 2019-07-01 11:56:15 UTC; 1s ago Process: 1433 ExecStartPre=/usr/sbin/lighttpd -t -f /etc/lighttpd/lighttpd.conf (code=exited, status=0/SUCCESS) Main PID: 1443 (lighttpd) CGroup: /system.slice/lighttpd.service \u251c\u25001443 /usr/sbin/lighttpd -D -f /etc/lighttpd/lighttpd.conf \u251c\u25001453 /usr/bin/php-cgi \u251c\u25001454 /usr/bin/php-cgi \u251c\u25001455 /usr/bin/php-cgi \u251c\u25001456 /usr/bin/php-cgi \u2514\u25001457 /usr/bin/php-cgi Jul 01 11:56:15 raspap lighttpd[1433]: Syntax OK Jul 01 11:56:15 raspap systemd[1]: Started Lighttpd Daemon. Now, copy rootCA.pem to your lighttpd web root ( important: do NOT share rootCA-key.pem ): sudo cp /home/pi/.local/share/mkcert/rootCA.pem /var/www/html Open a browser and enter the address: http://raspap.local/rootCA.pem. Download the root certificate to your client and add it to your system keychain. Examples below illustrate this process on OSX: Be sure to set this certificate to \"Always trust\" to avoid browser warnings. Finally, enter the address https://raspap.local in your browser. Enjoy an encrypted SSL connection to RaspAP. Mobile devices For the certificates to be trusted on mobile devices and remote clients, you will have to install the root CA using the method described above. Alternatively, on iOS, you can either use AirDrop or email the CA to yourself. After installing it, be sure to enable full trust. For Android, you will have to install the CA and then enable user roots. See this StackOverflow answer . More advanced topics are covered at mkcert .","title":"SSL certificates (manual)"},{"location":"ssl-manual/#ssl-certificates-manual","text":"Update: this process is now automated by the Quick Installer .","title":"SSL certificates (manual)"},{"location":"ssl-manual/#overview","text":"HTTPS prevents network attackers from observing or injecting page contents. Clearly, this is a good thing for RaspAP \u2014 given its function for creating and managing wireless networks. But HTTPS needs TLS certificates, and while deploying public websites is largely a solved issue thanks to the ACME protocol and Let's Encrypt , local web servers still mostly use HTTP because no one can get a universally valid certificate for localhost.","title":"Overview"},{"location":"ssl-manual/#locally-trusted-certificates","text":"Managing your own Certificate Authority (CA) is the best solution, but this usually requires an involved manual setup routine. An excellent solution for local websites is mkcert . This is a zero-config tool for making locally-trusted certificates with any name you like. mkcert automatically creates and installs a local CA in the system root store and generates locally-trusted certificates. It also works perfectly well with RaspAP. This allows you to generate a trusted certificate for a hostname (eg., raspap.local) or IP address because it only works for you. Here's the twist: it doesn't generate self-signed certificates, but certificates signed by your own private CA. This tool does not automatically configure servers or mobile clients to use the certificates, though \u2014 that's up to you (see the steps below). Read more about mkcert here and follow the project on GitHub .","title":"Locally trusted certificates"},{"location":"ssl-manual/#how-to","text":"Follow the steps below to generate and install a locally-trusted certificate for RaspAP. The local domain raspap.local is used in the examples below. You may substitute this with the default raspberrypi.local or your own hostname. Start by installing the pre-built binary for Arch Linux ARM on your Raspberry Pi: sudo wget https://github.com/FiloSottile/mkcert/releases/download/v1.3.0/mkcert-v1.3.0-linux-arm -O /usr/local/bin/mkcert sudo chmod +x /usr/local/bin/mkcert mkcert -install You should see output like the following: Using the local CA at \"/home/pi/.local/share/mkcert\" \u2728 The local CA is now installed in the system trust store! \u26a1\ufe0f Generate a certificate for raspap.local : cd /home/pi mkcert raspap.local \"*.raspap.local\" raspap.local ... and look for output like this: Using the local CA at \"/home/pi/.local/share/mkcert\" \u2728 Created a new certificate valid for the following names \ud83d\udcdc - \"raspap.local\" - \"*.raspap.local\" - \"raspap.local\" Reminder: X.509 wildcards only go one level deep, so this won't match a.b.raspap.local \u2139\ufe0f The certificate is at \"./raspap.local+2.pem\" and the key at \"./raspap.local+2-key.pem\" \u2705 Next, combine the private key and certificate: cat raspap.local+2-key.pem raspap.local+2.pem > raspap.local.pem Create a directory for the combined .pem file in lighttpd: sudo mkdir /etc/lighttpd/ssl Set permissions and move the .pem file: chmod 400 /home/pi/raspap.local.pem sudo mv /home/pi/raspap.local.pem /etc/lighttpd/ssl Edit the lighttpd configuration: sudo nano /etc/lighttpd/lighttpd.conf ... and add the following block to enable SSL with your new certificate: server.modules += (\"mod_openssl\") $SERVER[\"socket\"] == \":443\" { ssl.engine = \"enable\" ssl.pemfile = \"/etc/lighttpd/ssl/raspap.local.pem\" ssl.ca-file = \"/home/pi/.local/share/mkcert/rootCA.pem\" server.name = \"raspap.local\" server.document-root = \"/var/www/html\" } Optionally, you can redirect all HTTP requests to HTTPS like so: $SERVER[\"socket\"] == \":80\" { $HTTP[\"host\"] =~ \"(.*)\" { url.redirect = ( \"^/(.*)\" => \"https://%1/$1\" ) } } Restart the lighttpd service: sudo systemctl restart lighttpd Verify that lighttpd has restarted without errors: sudo systemctl status lighttpd You should see a response like the following: \u25cf lighttpd.service - Lighttpd Daemon Loaded: loaded (/lib/systemd/system/lighttpd.service; enabled) Active: active (running) since Mon 2019-07-01 11:56:15 UTC; 1s ago Process: 1433 ExecStartPre=/usr/sbin/lighttpd -t -f /etc/lighttpd/lighttpd.conf (code=exited, status=0/SUCCESS) Main PID: 1443 (lighttpd) CGroup: /system.slice/lighttpd.service \u251c\u25001443 /usr/sbin/lighttpd -D -f /etc/lighttpd/lighttpd.conf \u251c\u25001453 /usr/bin/php-cgi \u251c\u25001454 /usr/bin/php-cgi \u251c\u25001455 /usr/bin/php-cgi \u251c\u25001456 /usr/bin/php-cgi \u2514\u25001457 /usr/bin/php-cgi Jul 01 11:56:15 raspap lighttpd[1433]: Syntax OK Jul 01 11:56:15 raspap systemd[1]: Started Lighttpd Daemon. Now, copy rootCA.pem to your lighttpd web root ( important: do NOT share rootCA-key.pem ): sudo cp /home/pi/.local/share/mkcert/rootCA.pem /var/www/html Open a browser and enter the address: http://raspap.local/rootCA.pem. Download the root certificate to your client and add it to your system keychain. Examples below illustrate this process on OSX: Be sure to set this certificate to \"Always trust\" to avoid browser warnings. Finally, enter the address https://raspap.local in your browser. Enjoy an encrypted SSL connection to RaspAP.","title":"How-To"},{"location":"ssl-manual/#mobile-devices","text":"For the certificates to be trusted on mobile devices and remote clients, you will have to install the root CA using the method described above. Alternatively, on iOS, you can either use AirDrop or email the CA to yourself. After installing it, be sure to enable full trust. For Android, you will have to install the CA and then enable user roots. See this StackOverflow answer . More advanced topics are covered at mkcert .","title":"Mobile devices"},{"location":"ssl-quick/","text":"SSL certificates (installer) Overview The Quick Installer may be used to generate SSL certs with mkcert . The installer automates the manual steps described here , including configuring lighttpd with SSL support. It's recommended to review the manual setup to get an idea of what is happening behind the scenes. Simply append the -c or --cert option to the Quick Installer, like so: curl -sL https://install.raspap.com | bash -s -- --cert Note: this only installs mkcert and generates an SSL certificate with the input you provide. It does not (re)install RaspAP. The advantage with this method is it generates valid certificates signed by your own private CA, rather than self-signed certificates. The Quick Installer does not automatically configure clients to trust the certificates, however \u2014 that's up to you. See the steps below. Client configuration Open a browser and enter the address: http://raspberrypi.local/rootCA.pem (this URL may be your IP address or a different hostname, depending on your unique setup). Download the root certificate to your client and add it to your system keychain. Examples below illustrate this process on OSX: Be sure to set this certificate to \"Always trust\" to avoid browser warnings. Finally, enter the address https://raspberrypi.local in your browser. Enjoy an encrypted SSL connection to RaspAP. Mobile devices For the certificates to be trusted on mobile devices and remote clients, you will have to install the root CA using the method described above. Alternatively, on iOS, you can either use AirDrop or email the CA to yourself. After installing it, be sure to enable full trust. More advanced topics are covered at mkcert .","title":"SSL certificates (installer)"},{"location":"ssl-quick/#ssl-certificates-installer","text":"","title":"SSL certificates (installer)"},{"location":"ssl-quick/#overview","text":"The Quick Installer may be used to generate SSL certs with mkcert . The installer automates the manual steps described here , including configuring lighttpd with SSL support. It's recommended to review the manual setup to get an idea of what is happening behind the scenes. Simply append the -c or --cert option to the Quick Installer, like so: curl -sL https://install.raspap.com | bash -s -- --cert Note: this only installs mkcert and generates an SSL certificate with the input you provide. It does not (re)install RaspAP. The advantage with this method is it generates valid certificates signed by your own private CA, rather than self-signed certificates. The Quick Installer does not automatically configure clients to trust the certificates, however \u2014 that's up to you. See the steps below.","title":"Overview"},{"location":"ssl-quick/#client-configuration","text":"Open a browser and enter the address: http://raspberrypi.local/rootCA.pem (this URL may be your IP address or a different hostname, depending on your unique setup). Download the root certificate to your client and add it to your system keychain. Examples below illustrate this process on OSX: Be sure to set this certificate to \"Always trust\" to avoid browser warnings. Finally, enter the address https://raspberrypi.local in your browser. Enjoy an encrypted SSL connection to RaspAP.","title":"Client configuration"},{"location":"ssl-quick/#mobile-devices","text":"For the certificates to be trusted on mobile devices and remote clients, you will have to install the root CA using the method described above. Alternatively, on iOS, you can either use AirDrop or email the CA to yourself. After installing it, be sure to enable full trust. More advanced topics are covered at mkcert .","title":"Mobile devices"},{"location":"translations/","text":"Translations Overview Owing to its utility and low cost, the Raspberry Pi's reach extends to all corners of the globe. As our way of honoring this, we've made an effort to support internationalization (often abbreviated i18n ) with RaspAP. Given the response from this issue it became obvious that translations are something that the community both wanted and were willing to contribute to. About locales On Linux systems, GNU's Gettext provides a standardized way of managing multi-lingual messages. In order for Gettext to work with different languages, you must configure a language package on your RPi corresponding to one of our supported translations. To list languages currently installed on your system, use locale -a at the shell prompt. On a fresh install of Raspbian, this should return a list like the one below: $ locale -a C C.UTF-8 en_GB.utf8 POSIX To generate new locales, run sudo dpkg-reconfigure locales and select any other desired locales. Here is a useful list of ISO 639 language codes. Important : be sure to select UTF-8 as this is the preferred encoding. For example, on an RPi with many locales installed, locale -a would output something like this: $ locale -a C # fall-back, ASCII encoding, same as POSIX de_DE.utf8 # German language, Germany, UTF-8 encoding fr_FR.utf8 # French language, France, UTF-8 encoding it_IT.utf8 # Italian language, Italy, UTF-8 encoding ja_JP.utf8 # Japanese language, Japan, UTF-8 encoding en_GB.utf8 # English language, GB, UTF-8 encoding en_US.utf8 # English language, USA, UTF-8 encoding pt_BR.utf8 # Portuguese language, Brazil, UTF-8 encoding POSIX # fall-back, ASCII encoding, same as C Once you've configured a locale on your system, RaspAP will read the HTTP_ACCEPT_LANGUAGE string and use this to load your desired language in the UI. Alternatively, you can also select a different language from the Language tab in the System menu. Important : If you configured a new locale after installing RaspAP, you must restart lighttpd for the changes to take effect: sudo systemctl restart lighttpd.service Supported languages The following translations are currently maintained by the project: Language Locale Deutsch de_DE.UTF-8 Dansk da_DK.UTF-8 Fran\u00e7ais fr_FR.UTF-8 Italiano it_IT.UTF-8 Portugu\u00eas pt_BR.UTF-8 Svenska sv_SE.UTF-8 Nederlands nl_NL.UTF-8 \u6b63\u9ad4\u4e2d\u6587 (Chinese traditional) zh_TW.UTF-8 \u7b80\u4f53\u4e2d\u6587 (Chinese simplified) zh_CN.UTF-8 Indonesian id_ID.UTF-8 \ud55c\uad6d\uc5b4 (Korean) ko_KR.UTF-8 \u65e5\u672c\u8a9e (Japanese) ja_JP.UTF-8 Ti\u1ebfng Vi\u1ec7t vi_VN.UTF-8 \u010ce\u0161tina cs_CZ.UTF-8 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 ru_RU.UTF-8 Polskie pl_PL.UTF-8 Espa\u00f1ol es_MX.UTF-8 Finnish fi_FI.UTF-8 T\u00fcrk\u00e7e tr_TR.UTF-8 \u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03cc el_GR.UTF-8 We are certainly not limited to the above. If you are willing and able to translate RaspAP in your language, you will be credited as the original translator. Contributing to a translation RaspAP now has a translation project home at Crowdin . This is the place to go for all volunteers who would like to contribute to our ongoing translation efforts. How to become a translator The process is very straightforward. Start by signing up for a free account at Crowdin . Once you are logged in, head over to our project home . Here you will find our supported translations, recent activity, discussions and so on. You can get started by simply choosing the language you'd like to contribute to. For more info, see Crowdin's detailed walkthrough of the translation process.","title":"Translations"},{"location":"translations/#translations","text":"","title":"Translations"},{"location":"translations/#overview","text":"Owing to its utility and low cost, the Raspberry Pi's reach extends to all corners of the globe. As our way of honoring this, we've made an effort to support internationalization (often abbreviated i18n ) with RaspAP. Given the response from this issue it became obvious that translations are something that the community both wanted and were willing to contribute to.","title":"Overview"},{"location":"translations/#about-locales","text":"On Linux systems, GNU's Gettext provides a standardized way of managing multi-lingual messages. In order for Gettext to work with different languages, you must configure a language package on your RPi corresponding to one of our supported translations. To list languages currently installed on your system, use locale -a at the shell prompt. On a fresh install of Raspbian, this should return a list like the one below: $ locale -a C C.UTF-8 en_GB.utf8 POSIX To generate new locales, run sudo dpkg-reconfigure locales and select any other desired locales. Here is a useful list of ISO 639 language codes. Important : be sure to select UTF-8 as this is the preferred encoding. For example, on an RPi with many locales installed, locale -a would output something like this: $ locale -a C # fall-back, ASCII encoding, same as POSIX de_DE.utf8 # German language, Germany, UTF-8 encoding fr_FR.utf8 # French language, France, UTF-8 encoding it_IT.utf8 # Italian language, Italy, UTF-8 encoding ja_JP.utf8 # Japanese language, Japan, UTF-8 encoding en_GB.utf8 # English language, GB, UTF-8 encoding en_US.utf8 # English language, USA, UTF-8 encoding pt_BR.utf8 # Portuguese language, Brazil, UTF-8 encoding POSIX # fall-back, ASCII encoding, same as C Once you've configured a locale on your system, RaspAP will read the HTTP_ACCEPT_LANGUAGE string and use this to load your desired language in the UI. Alternatively, you can also select a different language from the Language tab in the System menu. Important : If you configured a new locale after installing RaspAP, you must restart lighttpd for the changes to take effect: sudo systemctl restart lighttpd.service","title":"About locales"},{"location":"translations/#supported-languages","text":"The following translations are currently maintained by the project: Language Locale Deutsch de_DE.UTF-8 Dansk da_DK.UTF-8 Fran\u00e7ais fr_FR.UTF-8 Italiano it_IT.UTF-8 Portugu\u00eas pt_BR.UTF-8 Svenska sv_SE.UTF-8 Nederlands nl_NL.UTF-8 \u6b63\u9ad4\u4e2d\u6587 (Chinese traditional) zh_TW.UTF-8 \u7b80\u4f53\u4e2d\u6587 (Chinese simplified) zh_CN.UTF-8 Indonesian id_ID.UTF-8 \ud55c\uad6d\uc5b4 (Korean) ko_KR.UTF-8 \u65e5\u672c\u8a9e (Japanese) ja_JP.UTF-8 Ti\u1ebfng Vi\u1ec7t vi_VN.UTF-8 \u010ce\u0161tina cs_CZ.UTF-8 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 ru_RU.UTF-8 Polskie pl_PL.UTF-8 Espa\u00f1ol es_MX.UTF-8 Finnish fi_FI.UTF-8 T\u00fcrk\u00e7e tr_TR.UTF-8 \u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03cc el_GR.UTF-8 We are certainly not limited to the above. If you are willing and able to translate RaspAP in your language, you will be credited as the original translator.","title":"Supported languages"},{"location":"translations/#contributing-to-a-translation","text":"RaspAP now has a translation project home at Crowdin . This is the place to go for all volunteers who would like to contribute to our ongoing translation efforts.","title":"Contributing to a translation"},{"location":"translations/#how-to-become-a-translator","text":"The process is very straightforward. Start by signing up for a free account at Crowdin . Once you are logged in, head over to our project home . Here you will find our supported translations, recent activity, discussions and so on. You can get started by simply choosing the language you'd like to contribute to. For more info, see Crowdin's detailed walkthrough of the translation process.","title":"How to become a translator"},{"location":"wireguard/","text":"WireGuard Overview Experimental \u00b7 Insiders only WireGuard \u00ae is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be considerably more performant than OpenVPN, and is generally regarded as the most secure, easiest to use, and simplest VPN solution for modern Linux distributions. WireGuard may be optionally installed by the Quick Installer . Once this is done, you can manage local (server) settings, create a peer configuration and control the wg-quick service with RaspAP. Creating a WireGuard tunnel WireGuard requires a public and private keypair for each device you wish to have access to the VPN tunnel. RaspAP simplifies this process with a magic button associated with each public key input field. Simply click or tap this button to securely generate a cryptographic keypair for both the server and peer. Several default values are provided for you as a starting point. These are intended to get a VPN tunnel up and running quickly. They may be modified to suit your needs. After the keypairs are generated, simply choose Save settings followed by Start WireGuard . The video walkthrough below illustrates the steps of configuring a WireGuard tunnel from start to finish. Your browser does not support the video tag. Due to WireGuard\u2019s design, both computers on either end of the VPN tunnel will need to have each other's public key. This is discussed below. Note: For security reasons, the local (server) private key is not displayed in the UI. The peer private key is encoded in the QR code and available to download in the client.conf file. If you wish to regenerate local or peer keypairs (or both), simply tap or click the magic button and choose Save settings . Alternatively, to remove a server or peer configuration entirely, disable the desired toggle and Save settings . This will delete the public/private keypair and the associated configuration. Peer configuration RaspAP processes the values in the WireGuard Settings and Peer tabs and creates two configurations for you: wg0.conf and client.conf . The former is used to configure the local (server) side of the VPN tunnel. The latter peer configuration is generated as a QR code on the Peer tab. Clients such as mobile devices may scan the QR code to transfer client.conf and import it into an associated WireGuard client application. Note: For this experimental release, a single peer configuration may be created. The ability to manage multiple peer configurations is on the project roadmap. Your peer will need to have WireGuard installed as well. For installing WireGuard on other systems, please see Wireguard's website . Tunneling traffic RaspAP uses WireGuard's PostUp and PostDown firewall rules to forward traffic from the wg0 interface to your configured wireless interface. In the example below, the default AP interface wlan0 is used: iptables -A FORWARD -i wlan0 -o wg0 -j ACCEPT iptables -A FORWARD -i wg0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT iptables -t nat -A POSTROUTING -o wg0 -j MASQUERADE These iptables rules are defined in WireGuard's default settings and may be modified if you wish. Note: If your VPN server is behind a NAT, you will need to open a UDP port of your choosing (51820 is the default). Low overhead Due to its low overhead compared with OpenVPN, WireGuard is well-suited for applications where battery longevity is a concern. As described by its developer , WireGuard isn't a chatty protocol. For the most part, it only transmits data when a peer wishes to send packets. When it's not being asked to send packets, it stops sending packets until it is asked again. As a result, your wireless adapter has a higher likelihood of being able to idle down, which leads to better battery life.","title":"WireGuard"},{"location":"wireguard/#wireguard","text":"","title":"WireGuard"},{"location":"wireguard/#overview","text":"Experimental \u00b7 Insiders only WireGuard \u00ae is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be considerably more performant than OpenVPN, and is generally regarded as the most secure, easiest to use, and simplest VPN solution for modern Linux distributions. WireGuard may be optionally installed by the Quick Installer . Once this is done, you can manage local (server) settings, create a peer configuration and control the wg-quick service with RaspAP.","title":"Overview"},{"location":"wireguard/#creating-a-wireguard-tunnel","text":"WireGuard requires a public and private keypair for each device you wish to have access to the VPN tunnel. RaspAP simplifies this process with a magic button associated with each public key input field. Simply click or tap this button to securely generate a cryptographic keypair for both the server and peer. Several default values are provided for you as a starting point. These are intended to get a VPN tunnel up and running quickly. They may be modified to suit your needs. After the keypairs are generated, simply choose Save settings followed by Start WireGuard . The video walkthrough below illustrates the steps of configuring a WireGuard tunnel from start to finish. Your browser does not support the video tag. Due to WireGuard\u2019s design, both computers on either end of the VPN tunnel will need to have each other's public key. This is discussed below. Note: For security reasons, the local (server) private key is not displayed in the UI. The peer private key is encoded in the QR code and available to download in the client.conf file. If you wish to regenerate local or peer keypairs (or both), simply tap or click the magic button and choose Save settings . Alternatively, to remove a server or peer configuration entirely, disable the desired toggle and Save settings . This will delete the public/private keypair and the associated configuration.","title":"Creating a WireGuard tunnel"},{"location":"wireguard/#peer-configuration","text":"RaspAP processes the values in the WireGuard Settings and Peer tabs and creates two configurations for you: wg0.conf and client.conf . The former is used to configure the local (server) side of the VPN tunnel. The latter peer configuration is generated as a QR code on the Peer tab. Clients such as mobile devices may scan the QR code to transfer client.conf and import it into an associated WireGuard client application. Note: For this experimental release, a single peer configuration may be created. The ability to manage multiple peer configurations is on the project roadmap. Your peer will need to have WireGuard installed as well. For installing WireGuard on other systems, please see Wireguard's website .","title":"Peer configuration"},{"location":"wireguard/#tunneling-traffic","text":"RaspAP uses WireGuard's PostUp and PostDown firewall rules to forward traffic from the wg0 interface to your configured wireless interface. In the example below, the default AP interface wlan0 is used: iptables -A FORWARD -i wlan0 -o wg0 -j ACCEPT iptables -A FORWARD -i wg0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT iptables -t nat -A POSTROUTING -o wg0 -j MASQUERADE These iptables rules are defined in WireGuard's default settings and may be modified if you wish. Note: If your VPN server is behind a NAT, you will need to open a UDP port of your choosing (51820 is the default).","title":"Tunneling traffic"},{"location":"wireguard/#low-overhead","text":"Due to its low overhead compared with OpenVPN, WireGuard is well-suited for applications where battery longevity is a concern. As described by its developer , WireGuard isn't a chatty protocol. For the most part, it only transmits data when a peer wishes to send packets. When it's not being asked to send packets, it stops sending packets until it is asked again. As a result, your wireless adapter has a higher likelihood of being able to idle down, which leads to better battery life.","title":"Low overhead"}]}